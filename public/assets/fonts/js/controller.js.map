{"version":3,"sources":["chat-settings.controller.js","stream.controller.js","likes-widget.controller.js","ModelOnline.controller.js","media.controller.js","payment.controller.js"],"names":["angular","module","controller","$scope","appSettings","chatSettingService","performerchat","console","log","get","USER","role","id","then","data","saveChanges","form","settingsData","copy","update","success","alertify","message","error","$timeout","$uibModal","socket","PerformerChat","chatService","$http","tablist","onMessageCallbacks","isGroupLive","isPrivateChat","isOffline","groupLink","roomId","virtualRoom","streamingInfo","spendTokens","time","tokensReceive","type","hasRoom","on","sender","connection","userid","channel","onGroupChat","model_id","model","online","$","removeClass","BASE_URL","show","status","addClass","hide","onModelInitPublicChat","broadcastid","statusMessage","isShowPrivateMessage","modelId","isStreaming","length","chatType","warning","emit","window","location","href","CHAT_ROOM_ID","ownerId","modalInstance","open","animation","templateUrl","Math","random","toString","slice","backdrop","keyboard","result","res","reload","connectionNow","initRTCMultiConnection","RTCMultiConnection","body","document","getElementById","sessionid","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","openSignalingChannel","config","onmessage","onopen","setTimeout","send","onMediaError","alert","onstream","event","mediaElement","muted","video","createElement","src","URL","createObjectURL","stream","videosContainer","appendChild","enableLogs","setupConnection","getExternalIceServers","timeout","initNumber","capture","takeSnapshot","snapshot","post","base64","shotNumber","$on","clearTimeout","isInitiator","broadcastingConnection","session","attachStreams","push","dontCaptureUserMedia","dontTransmit","openBroadcast","room","screen","audio","oneway","typeOfStreams","joinBroadcast","has","broadcaster","join","extra","close","msg","initRoom","beep","snd","Audio","play","sendTip","prompt","evt","value","isNumber","parseInt","sendTipTokens","response","tokens","sendObj","text","sendModelReceiveInfo","set","onModelReceiveInfo","stopStreaming","changeStreaming","getChatPrice","cost","confirm","likesWidgetService","init","itemId","item","count","headers","totalLikes","checkMe","liked","likeThis","likeMe","_","onlineService","currentPage","lastPage","perPage","LIMIT_PER_PAGE","orderBy","sort","totalPages","modelOnlineNull","keyword","filter","getData","page","limit","category","categoryId","users","current_page","last_page","total","getTopModels","topModels","setPage","onlineInit","setInterval","setFilter","getModelsByCategory","setFavorite","index","favorite","isRotate","modelRotates","thread","getModelRotateImages","threadId","isArray","images","forEach","lastCaptureImage","videoService","galleryService","mediaService","currentTab","setTab","getMedia","getModelVideos","videos","getModelGalleries","galleries","changePage","checkOwner","url","owner","galleryPrice","e","ajax","setHeader","rejectTransaction","approveTransaction","showTransactionDetail","transaction","size","resolve"],"mappings":"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","file":"controller.js","sourcesContent":["/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n'use strict';\nangular.module('matroshkiApp').controller('chatSettingCtrl', [ '$scope', 'appSettings', 'chatSettingService', function ($scope, appSettings, chatSettingService) {\n  $scope.performerchat = [];\n  //get chat settings data;\n  console.log(appSettings);\n  chatSettingService.get(appSettings.USER.role, appSettings.USER.id).then(function (data) {\n    $scope.performerchat = data.data;\n    console.log(data);\n  });\n  $scope.saveChanges = function (form) {\n    var settingsData = angular.copy($scope.performerchat);\n    chatSettingService.update(appSettings.USER.id, settingsData).then(function (data) {\n      if (data.data.success) {\n        return alertify.success(data.data.message);\n      }\n      return  alertify.error(data.data.message);\n\n\n    });\n  };\n}]);","'use strict';\n\nangular.module('matroshkiApp')\n.controller('streamCtrl',[ '$scope', '$timeout', 'appSettings', '$uibModal', 'socket', 'PerformerChat', 'chatService', 'chatSettingService', '$http', function ($scope, $timeout, appSettings, $uibModal, socket, PerformerChat, chatService, chatSettingService, $http) {\n  $scope.tablist = 'profiles';\n  // using single socket for RTCMultiConnection signaling\n  var onMessageCallbacks = {};\n  $scope.isGroupLive = false;\n  $scope.isPrivateChat = false;\n  $scope.isOffline = false;\n  $scope.groupLink = null;\n  $scope.roomId = null;\n  $scope.virtualRoom = null;\n  \n  $scope.streamingInfo = {\n      spendTokens: 0,\n      time: 0,\n      tokensReceive: 0,\n      type: 'public',\n      hasRoom: true\n  };\n  \n  \n  socket.on('broadcast-message', function (data) {\n    if (data.sender == connection.userid){\n      return;\n    }\n    if (onMessageCallbacks[data.channel]) {\n      onMessageCallbacks[data.channel](data.message);\n    }\n  });\n  \n\n  socket.onGroupChat(function (data) {\n//      console.log(data);\n      \n    if(PerformerChat.model_id == data.model){\n      $scope.isGroupLive = data.online;\n      $scope.isOffline = true;\n      $('#videos-container').removeClass('loader');\n      var virtualRoom = (data.virtualRoom) ?  '?vr=' + data.virtualRoom : '';\n      $scope.groupLink = appSettings.BASE_URL + 'members/groupchat/' + data.model + virtualRoom;\n    }else{\n        $('#offline-image').show();\n        $scope.isOffline = true;\n        \n    }\n  });\n  socket.on('public-room-status', function (status){\n      if(!status){\n          $('#videos-container').removeClass('loader');\n          $('#offline-image').show();\n        $scope.isOffline = true;\n      }else{\n          $('#videos-container').addClass('loader');\n          $('#offline-image').hide();\n          $scope.isPrivateChat = false;\n            $scope.isGroupLive = false;\n            $scope.isOffline = false;\n      }\n  });\n  socket.onModelInitPublicChat(function (data){\n//    console.log('model init room');\n    \n      $scope.virtualRoom = data.broadcastid;\n    \n    $scope.isPrivateChat = false;\n    $scope.isGroupLive = false;\n//    if($('#offline-image').length > 0){\n         $('#offline-image').hide();\n//         \n//    } \n    //$scope.joinBroadcast($scope.roomId, data.broadcastid);\n    $('#videos-container').addClass('loader');\n    $scope.statusMessage = 'Model is online please refresh your browser to connect again. if website does not auto connect.';\n    \n  });\n  \n  $scope.isShowPrivateMessage = false;\n  \n  socket.on('model-private-status', function (data){\n//      console.log(data);\n      if(data.modelId == PerformerChat.model_id){\n          $scope.isPrivateChat = data.isStreaming;\n          $scope.isOffline = true;\n        if(data.isStreaming){\n          if($('#offline-image').length > 0){\n                \n                $('#offline-image').hide();\n                \n           } \n        }else{\n          if($('#offline-image').length > 0){\n                \n                $('#offline-image').show();\n                \n           }   \n        }\n      }\n      if($scope.streamingInfo.type == 'private' && !data.isStreaming){\n        if(!$scope.isShowPrivateMessage){\n        //  alertify.error('Model stopped video call.', 30);\n          $scope.isShowPrivateMessage = true;\n        }\n      }\n  });\n  socket.on('member-missing-tokens', function (chatType){\n//     console.log(chatType);\n      if(chatType == 'private'){\n      alertify.warning('User tokens do not enough, private chat have disconnected');\n      socket.emit('model-leave-room');\n      $timeout(function (){\n            window.location.href = appSettings.BASE_URL + 'models/live';\n        },3000);\n    }\n  });\n\nsocket.on('disconnectAll', function (data){\n  if(appSettings.CHAT_ROOM_ID != data.id && data.ownerId == appSettings.USER.id){\n  var modalInstance = $uibModal.open({\n      animation: true,\n      templateUrl: appSettings.BASE_URL + 'app/modals/close-modal/modal.html?v=' + Math.random().toString(36).slice(2),\n      controller: 'modalCloseCtrl',\n      backdrop: 'static',\n      keyboard: false\n    });\n    modalInstance.result.then(function (res) {\n      window.location.reload();\n    });\n  }\n});\n\n$scope.connectionNow = null;\n  // initializing RTCMultiConnection constructor.\n  $scope.isStreaming = null;\n  function initRTCMultiConnection(userid) {\n    var connection = new RTCMultiConnection();\n    $scope.connectionNow = connection;\n    connection.body = document.getElementById('videos-container');\n    connection.channel = connection.sessionid = connection.userid = userid || connection.userid;\n    connection.sdpConstraints.mandatory = {\n      OfferToReceiveAudio: true,\n      OfferToReceiveVideo: true\n    };\n    \n    // using socket.io for signaling\n    connection.openSignalingChannel = function (config) {\n      var channel = config.channel || this.channel;\n      onMessageCallbacks[channel] = config.onmessage;\n      if (config.onopen) {\n        setTimeout(config.onopen, 1000);\n      }\n\n      return {\n        send: function (message) {\n          socket.emit('broadcast-message', {\n            sender: connection.userid,\n            channel: channel,\n            message: message\n          });\n        },\n        channel: channel\n      };\n    };\n    connection.onMediaError = function (error) {\n//              JSON.stringify(error)\n      alertify.alert('Warning', error.message);\n    };\n\n    //fix echo\n    connection.onstream = function (event) {\n      if (event.mediaElement) {\n        event.mediaElement.muted = true;\n        delete event.mediaElement;\n      }\n\n      var video = document.createElement('video');\n      if (event.type === 'local') {\n        video.muted = true;\n      }\n      video.src = URL.createObjectURL(event.stream);\n      connection.videosContainer.appendChild(video);\n      \n      \n    }\n\n    //disable log\n    connection.enableLogs = false;\n    \n    return connection;\n  }\n\n  // this RTCMultiConnection object is used to connect with existing users\n  var connection = initRTCMultiConnection();\n  \n  //get other TURN server\n  //TODO - config our turn server\n  var setupConnection = function() {\n    connection.getExternalIceServers = true;\n    connection.onstream = function (event) {\n      if(event.type == 'local' && $scope.streamingInfo.type == 'public'){\n        var timeout = null;\n        var initNumber = 1;\n        var capture = function() {\n        \n          connection.takeSnapshot(event.userid, function(snapshot) {\n              $http.post(appSettings.BASE_URL + 'api/v1/rooms/'+appSettings.CHAT_ROOM_ID+'/setImage', {\n                base64: snapshot,\n                shotNumber: initNumber\n              });\n            });\n          initNumber = (initNumber < 6 ) ? initNumber+1 : 1;\n\n          timeout = setTimeout(capture, 30000);\n      };\n      capture();\n\n      $scope.$on('destroy', function() {\n        clearTimeout(timeout);\n      });\n\n      }\n//      event.mediaElement.controls = false;\n      connection.body.appendChild(event.mediaElement);\n    \n      if (connection.isInitiator == false && !connection.broadcastingConnection) {\n        $scope.isStreaming = true;\n        // \"connection.broadcastingConnection\" global-level object is used\n        // instead of using a closure object, i.e. \"privateConnection\"\n        // because sometimes out of browser-specific bugs, browser\n        // can emit \"onaddstream\" event even if remote user didn't attach any stream.\n        // such bugs happen often in chrome.\n        // \"connection.broadcastingConnection\" prevents multiple initializations.\n\n        // if current user is broadcast viewer\n        // he should create a separate RTCMultiConnection object as well.\n        // because node.js server can allot him other viewers for\n        // remote-stream-broadcasting.\n        connection.broadcastingConnection = initRTCMultiConnection(connection.userid);\n\n        // to fix unexpected chrome/firefox bugs out of sendrecv/sendonly/etc. issues.\n        connection.broadcastingConnection.onstream = function () {\n\n        };\n\n        connection.broadcastingConnection.session = connection.session;\n        connection.broadcastingConnection.attachStreams.push(event.stream); // broadcast remote stream\n        connection.broadcastingConnection.dontCaptureUserMedia = true;\n\n        // forwarder should always use this!\n        connection.broadcastingConnection.sdpConstraints.mandatory = {\n          OfferToReceiveVideo: false,\n          OfferToReceiveAudio: false\n        };\n\n        connection.broadcastingConnection.open({\n          dontTransmit: true\n        });\n        $('#offline-image').hide();\n        $('#videos-container').removeClass('loader'); \n      }\n    };\n  };\n  setupConnection();\n\n\n  // ask node.js server to look for a broadcast\n  // if broadcast is available, simply join it. i.e. \"join-broadcaster\" event should be emitted.\n  // if broadcast is absent, simply create it. i.e. \"start-broadcasting\" event should be fired.\n  // TODO - model side should start broadcasting and member/client side should join only\n  $scope.openBroadcast = function (room, virtualRoom) {\n    $scope.roomId = room;\n    $scope.virtualRoom = virtualRoom;\n    //TODO - hide start button\n\n    connection.session = {\n      video: true,\n      screen: false,\n      audio: true,\n      oneway: true\n    };\n\n    socket.emit('join-broadcast', {\n      broadcastid: $scope.virtualRoom,\n      room: $scope.roomId,\n      userid: connection.userid,\n      typeOfStreams: connection.session,\n      openBroadcast: true\n    });\n    $scope.isStreaming = true;\n    $('#startStream_'+room).hide();\n  };\n\n  /**\n   * join broadcast directly, use for member side\n   */\n  \n  $scope.joinBroadcast = function (room, virtualRoom) {\n    //check model is online / streaming then open broadcast.\n    socket.emit('has-broadcast', virtualRoom, function(has) {\n        \n      if (!has) {\n        //TODO - should show nice alert message\n        $('#offline-image').show();\n//       $scope.isOffline = true;\n        $('#videos-container').removeClass('loader');\n        return;\n      }\n      $scope.isPrivateChat = false;\n      $scope.isGroupLive = false;\n      $scope.isOffline = false;\n      \n      $scope.roomId = room;\n      $scope.virtualRoom = virtualRoom;\n      //TODO - check model room is open or not first?\n      connection.session = {\n        video: true,\n        screen: false,\n        audio: true,\n        oneway: true\n      };\n      socket.emit('join-broadcast', {\n        broadcastid: $scope.virtualRoom,\n        room: $scope.roomId,\n        userid: connection.userid,\n        typeOfStreams: connection.session\n      });\n    });\n  };\n\n  // this event is emitted when a broadcast is already created.\n  socket.on('join-broadcaster', function (broadcaster, typeOfStreams) {\n\n    connection.session = typeOfStreams;\n    connection.channel = connection.sessionid = broadcaster.userid;\n\n    connection.sdpConstraints.mandatory = {\n      OfferToReceiveVideo: !!connection.session.video,\n      OfferToReceiveAudio: !!connection.session.audio\n    };\n\n    connection.join({\n      sessionid: broadcaster.userid,\n      userid: broadcaster.userid,\n      extra: {},\n      session: connection.session\n    });\n  });\n\n  // this event is emitted when a broadcast is absent.\n  socket.on('start-broadcasting', function (typeOfStreams) {\n//      console.log('model start broadcast');\n    // host i.e. sender should always use this!\n    connection.sdpConstraints.mandatory = {\n      OfferToReceiveVideo: false,\n      OfferToReceiveAudio: false\n    };\n    connection.session = typeOfStreams;\n    connection.open({\n      dontTransmit: true\n    });\n\n    if (connection.broadcastingConnection) {\n      // if new person is given the initiation/host/moderation control\n      connection.close();\n      connection.broadcastingConnection = null;\n    }\n  });\n\n  socket.on('model-left', function() {\n    //close connect if model live\n    connection.close();\n    connection.broadcastingConnection = null;\n  });\n\n  socket.on('broadcast-error', function (data) {\n    if (!appSettings.USER || appSettings.USER.role != 'model') {\n      alertify.alert('Warning', data.msg);\n    }\n\n    // if (appSettings.USER && appSettings.USER.role == 'model') {\n    //   window.location.reload();\n    // }\n    $scope.isStreaming = false;\n  });\n\n  //rejoin event\n  socket.on('rejoin-broadcast', function (data) {\n    connection = initRTCMultiConnection();\n    setupConnection();\n\n    socket.emit('join-broadcast', {\n      broadcastid: data.id,\n      room: data.room,\n      userid: connection.userid,\n      typeOfStreams: connection.typeOfStreams\n    });\n  });\n\n \n\n\n  $scope.initRoom = function (roomId, virtualRoom) {\n    $scope.roomId = roomId;\n    $scope.virtualRoom = virtualRoom;\n    \n    //get model streaming\n    socket.emit('join-broadcast', {\n      broadcastid: $scope.virtualRoom,\n      room: $scope.roomId,\n      userid: connection.userid,\n      openBroadcast: false,\n      typeOfStreams: {\n        video: false,\n        screen: false,\n        audio: false,\n        oneway: true\n      }\n    });\n  };\n  \n  \n  function beep() {\n    var snd = new Audio(\"/sounds/received_message.mp3\");\n    snd.play();\n  }\n\n    \n  $scope.sendTip = function (roomId, chatType) {\n\n    alertify.prompt(\"Enter your tips.\", '', function (evt, value) {\n      if (angular.isNumber(parseInt(value)) && parseInt(value) > 0) {\n        chatService.sendTipTokens(roomId, parseInt(value)).then(function (response)\n        {\n          if (response.data.success == false) {\n            return alertify.warning(response.data.message);\n          } else {\n            alertify.success(response.data.message);\n            $scope.streamingInfo.spendTokens += parseInt(value);\n            $scope.streamingInfo.tokens -= parseInt(value);\n            \n            var sendObj = {\n              roomId: roomId,\n              text: 'Send ' + parseInt(value) + ' tokens',\n              type: chatType\n            };\n            //emit chat event to server\n            socket.sendTip(sendObj);\n            socket.sendModelReceiveInfo({time: 0, tokens: value});\n            beep();\n          }\n        });\n      } else {\n        alertify.error('Please enter a number.');\n        $scope.sendTip();\n      }\n    }).set('title', 'Tip');\n  };\n  /**\n   * \n   * @param {type} roomId\n   * @returns {undefined}\n   */\n  socket.onModelReceiveInfo(function (data){\n//      $scope.streamingInfo.tokens += parseInt(data.tokens);\n    if($scope.streamingInfo.type == 'private' && appSettings.USER && appSettings.USER.role == 'model'){\n        $scope.streamingInfo.tokensReceive += parseInt(data.tokens);\n        $scope.streamingInfo.time += parseInt(data.time);\n    }\n  });\n  /*\n  if (!appSettings.USER || appSettings.USER.id != PerformerChat.model_id) {\n    //event get current model online\n    socket.getCurrentModelOnline(appSettings.CHAT_ROOM_ID);\n//            \n    //event receive current model online or offline (return undefined)\n    $scope.modelOnline = null;\n    socket.onCurrentModelOnline(function (data) {\n      $scope.modelOnline = _.find(data, _.matchesProperty('id', PerformerChat.model_id));\n      \n      if (!$scope.modelOnline || typeof $scope.modelOnline == 'undefined') {\n        alertify.notify('Model is offline.');\n        $scope.isOffline = true;\n        if($('#offline-image').length > 0){\n            $('#offline-image').show();\n        }\n        $('#videos-container').removeClass('loader');\n       \n      }\n    });\n  }*/\n\n  $scope.stopStreaming = function (){\n//    $(\"video\").each(function () {\n//      this.pause();\n//      delete(this);\n//    });\n\n    // connection.stopMediaStream();\n  //   connection.removeStream();\n     $scope.connectionNow.close();\n\n//       socket.leaveRoom(roomId);\n\n\n//    connection.close();\n//    connection.broadcastingConnection = null;\n    $scope.isStreaming = false;\n    \n//call an event to socket\n\nsocket.emit('model-leave-room');\n\n  };\n  $scope.changeStreaming = function (modelId, type){\n    chatSettingService.getChatPrice(modelId, type).success(function (cost){\n      var message = (type == 'group') ? 'Group chat will take you ' + cost + ' tokens each minute' : 'Private chat will take you ' + cost + ' tokens each minute';\n      alertify.confirm(message,\n          function () {\n            if(type == 'group'){\n              return window.location.href = appSettings.BASE_URL + 'members/groupchat/' + modelId;\n            }else {\n              return window.location.href = appSettings.BASE_URL + 'members/privatechat/' + modelId;\n            }\n          }).set('title', 'Confirm');\n\n    });\n  };\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n'use strict';\nangular.module('matroshkiApp').controller('likesWidgetCtrl', [ '$scope', 'appSettings', 'likesWidgetService', function ($scope, appSettings, likesWidgetService) {\n\n  $scope.init = function (itemId, item)\n  {\n    $scope.itemId = itemId;\n    $scope.item = item;\n    likesWidgetService.count({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n      $scope.totalLikes = data;\n    });\n    //check like status\n    likesWidgetService.checkMe({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n      $scope.liked = data;\n    });\n  };\n\n  $scope.likeThis = function () {\n    likesWidgetService.likeMe({itemId: $scope.itemId, status: $scope.liked, item: $scope.item}).then(function (data, status, headers, config) {\n      if (data.data.status == 'error') {\n        alertify.warning(data.data.message);\n        return;\n      }\n      $scope.liked = (data.data.status == 'like') ? 1 : 0;\n      likesWidgetService.count({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n        $scope.totalLikes = data;\n      });\n    });\n  };\n\n}]);","'use strict';\nangular.module('matroshkiApp').controller('modelOnlineCtrl', ['$scope', 'appSettings', '_', 'onlineService', 'socket', function ($scope, appSettings, _, onlineService, socket) {\n\n\n    $scope.currentPage = 1;\n    $scope.lastPage = 1;\n    $scope.perPage = appSettings.LIMIT_PER_PAGE;\n    $scope.orderBy = 'isStreaming';\n    $scope.sort = 'desc';\n    $scope.totalPages = 0;\n    $scope._ = _;\n    $scope.modelOnlineNull = false;\n    $scope.keyword = '';\n    $scope.filter = 'week';\n\n    $scope.getData = function () {\n      onlineService.get({page: $scope.lastPage, orderBy: $scope.orderBy, sort: $scope.sort, limit: $scope.perPage, keyword: $scope.keyword, filter: $scope.filter, category: $scope.categoryId}).success(function (data) {\n        $scope.users = data.data;\n        $scope.currentPage = data.current_page;\n        $scope.totalPages = data.last_page;//Math.ceil(data.total / data.per_page);\n        if (data.total == 0) {\n          $scope.modelOnlineNull = true;\n        } else {\n          $scope.modelOnlineNull = false;\n        }\n      });\n    };\n\n    $scope.getTopModels = function () {\n      onlineService.getTopModels().success(function (data) {\n        $scope.topModels = data;\n      });\n    };\n\n    $scope.setPage = function (page) {\n       if(page > 0 && page <= $scope.totalPages){\n            $scope.lastPage = page;\n            $scope.getData();\n        }\n    };\n\n    $scope.onlineInit = function (keyword, id) {\n      $scope.keyword = keyword;\n      $scope.categoryId = id || '';\n      $scope.getData();\n      $scope.getTopModels();\n      // Run function every second\n      setInterval($scope.getData, 30000);\n    };\n\n    $scope.setFilter = function (filter) {\n      $scope.filter = filter;\n      $scope.getData();\n    };\n    //load models in streaming page\n    $scope.getModelsByCategory = function (model, category) {\n\n      onlineService.getModelsByCategory(model, category).success(function (data)\n      {\n        $scope.users = data;\n      });\n    };\n    \n    //check model online\n    socket.onModelInitPublicChat = function (data){\n        console.log(data);\n    }\n\n    $scope.setFavorite = function (index, id) {\n      onlineService.setFavorite(id).then(function (data) {\n        if (data.data.success) {\n          $scope.users[index].favorite = (data.data.favorite == 'like') ? data.data.favorite : null;\n        } else {\n          alertify.error(data.data.message);\n        }\n      });\n    };\n\n    $scope.isRotate = false;\n\n    $scope.modelRotates = function (thread){\n\n      onlineService.getModelRotateImages(thread.threadId).then(function(data){\n\n        if(data && angular.isArray(data.data)){\n          $scope.isRotate = true;\n\n          var images = data.data;\n\n          angular.forEach(images, function(item){\n            setTimeout(function(){\n              thread.lastCaptureImage = item;\n             }, 150);\n          });\n        }\n      });\n      \n    };\n\n  }]);","'use strict';\nangular.module('matroshkiApp').controller('mediaCtrl', ['$scope', 'appSettings', 'videoService', 'galleryService', 'mediaService', function ($scope, appSettings, videoService, galleryService, mediaService) {\n    $scope.currentTab = 0;\n    $scope.currentPage = 1;\n    $scope.lastPage = 1;\n    \n    $scope.setTab = function (index) {\n      $scope.currentTab = index;\n      $scope.currentPage = 1;\n      $scope.lastPage = 1;\n      $scope.getMedia(index, 1);\n    };\n\n//init data\n    $scope.init = function (model) {\n      $scope.modelId = model;\n    };\n    $scope.getMedia = function (index, page) {\n      if (index == 1) {\n        videoService.getModelVideos($scope.modelId, page).success(function (data) {\n          $scope.videos = data.data;\n          $scope.currentPage = data.current_page;\n          $scope.lastPage = data.last_page;\n        });\n      } else if (index == 2) {\n        galleryService.getModelGalleries($scope.modelId, page).success(function (data) {\n          \n          $scope.galleries = data.data;\n          $scope.currentPage = data.current_page;\n          $scope.lastPage = data.last_page;\n        });\n      }\n    };\n    $scope.changePage = function (status){\n      if(status == 0){\n          var page = ($scope.currentPage > 1) ? parseInt($scope.currentPage - 1) : 1;\n          $scope.getMedia($scope.currentTab, page);\n      }else{\n          console.log($scope.currentPage, $scope.lastPage);\n          var page = ($scope.currentPage < $scope.lastPage) ? parseInt($scope.currentPage + 1) : $scope.lastPage;\n          $scope.getMedia($scope.currentTab, page);\n      }\n    };\n    //check owner\n    $scope.checkOwner = function (item, url) {\n      \n      mediaService.checkOwner({id: item.id}).then(function (data) {\n        if (!data.data.success) {\n          return alertify.alert(data.data.message);\n        } else {\n          if (data.data.owner > 0) {\n\n            window.location.href = url + '/' + item.id;\n          } else {\n            alertify.confirm(\"Are you sure you want to buy this ( \"+item.galleryPrice+\" tokens)?\", function (e) {\n              if (e) {\n                $.ajax({\n                  url: appSettings.BASE_URL + 'api/v1/buy-item',\n                  type: 'post',\n                  data: {\n                    id: item.id,\n                    item: item.type\n                  },\n                  success: function (data) {\n                    if (!data.success) {\n                      alertify.alert('Warning', data.message);\n                    } else {\n                      alertify.success(data.message);\n                      window.location.href = data.url;\n                    }\n                  }\n                });\n              }\n            }).setHeader('<em> Confirm </em> ');\n          }\n        }\n      });\n    };\n  }]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n'use strict';\nangular.module('matroshkiApp').controller('paymentCtrl', ['$scope', '$uibModal', 'appSettings', function ($scope, $uibModal, appSettings) {\n\n//Reject transaction\n    $scope.rejectTransaction = function (id) {\n      alertify.confirm('Are you sure you want to reject this transaction? Please refund member money first.',\n              function () {\n                return window.location.href = appSettings.BASE_URL + 'admin/manager/transaction/reject/' + id;\n              }).set('title', 'Confirm');\n    }\n    //Approve transaction\n    $scope.approveTransaction = function (id) {\n      alertify.confirm('Are you sure you want to approve this transaction?',\n              function () {\n                return window.location.href = appSettings.BASE_URL + 'admin/manager/transaction/approve/' + id;\n              }).set('title', 'Confirm');\n    }\n    //transaction detail\n\n    $scope.showTransactionDetail = function (transaction, size) {\n      var modalInstance = $uibModal.open({\n        animation: true,\n        templateUrl: appSettings.BASE_URL + 'app/modals/transaction/modal.html',\n        controller: 'transactionPopupCtrl',\n        size: size,\n        backdrop: 'static',\n        keyboard: false,\n        resolve: {\n          transaction: function () {\n            return transaction;\n          }\n        }\n\n      });\n      modalInstance.result.then(function (data) {\n//        window.location.reload();\n\n      });\n//  \n    };\n  }]);"]}