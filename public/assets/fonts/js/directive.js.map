{"version":3,"sources":["app-directive.js","stream-video-player.directive.js","convert-to-number.js","chat-text.directive.js","private-chat-video.directive.js","group-chat-video.directive.js","comment-like-share.directive.js","upload-file.js","multiple-upload.js"],"names":["angular","module","directive","require","link","scope","elem","attrs","ctrl","firstPassword","pwCheck","add","on","$apply","$setValidity","val","$","elm","$validators","integer","modelValue","viewValue","$isEmpty","INTEGER_REGEXP","test","restrict","message","controller","$scope","alertify","URL_REGEXP","element","isValidUrl","hasClass","removeClass","addClass","socket","userService","$window","inRoom","$timeout","$uibModal","appSettings","USER","sessionStorage","closePopup","autoInstance","open","animation","templateUrl","BASE_URL","Math","random","toString","slice","backdrop","size","keyboard","result","then","res","data","role","id","model","findMember","from","user","status","requestUrl","room","virtualRoom","name","firstName","lastName","username","avatar","confirm","location","href","callBackDenial","setting","setHeader","autoCancel","msg","callback","isClicked","remove","totalRequest","length","text","emit","EMAIL_REGEXP","email","fallbackSrc","postLink","iElement","iAttrs","bind","attr","$el","$attr","ngModel","emojiarea","path","options","$eval","wysiwyg","$wysiwyg","$setViewValue","e","code","keyCode","which","trigger","preventDefault","$formatters","push","siblings","$sce","template","replace","vidSrc","showControl","vid","console","log","videoId","trustSrc","undefined","trustAsResourceUrl","context","firstChild","controls","$parsers","parseInt","chatService","_","modelId","chatType","memberId","roomId","isStreaming","streamingInfo","PerformerChat","onlineService","chatPanel","Performerchat","chatMessages","lastpage","orderBy","sort","limit","enableLoadMore","showLoading","isShowPrivateRequest","isOffline","findByModel","type","page","success","concat","last_page","currentpage","current_page","$emit","loadPreviousMessage","myInfo","userData","get","clone","tokens","members","getOnlineMembers","onlineMembers","copy","USERS","currentObject","onModelReceiveInfo","member","existed","find","time","spendTokens","onMemberJoin","extised","onLeaveRoom","joinRoomData","joinRoom","send","keyEvent","trim","sendMessage","sendTip","prompt","evt","value","isNumber","sendTokens","response","error","notify","checkBanNick","lock","sendObj","alert","sendChatMessage","createdAt","Date","userId","focus","window","onReceiveChatMessage","ownerId","onReceiveTip","tip","reqPrivateChat","reqGroupChat","banNick","index","addBlackList","findIndex","o","banStatus","unlockNick","removeBlackList","videoRequests","ele","$on","height","each","i","outerHeight","animate","scrollTop","$interval","VideoStream","peerService","stream","localStream","initVideoCall","streamURL","showMyCam","hasRoom","removeMyRoom","accept","deny","stop","second","createStream","userType","s","init","URL","createObjectURL","modelStreaming","userStreaming","err","sendCallRequest","warning","acceptRequest","stopStreaming","getVideoTracks","getAudioTracks","isDefined","cancel","peers","streamActive","peer","streamUrl","document","getElementById","sendPaidTokens","has","changeCam","key","getLocalVideo","userRole","spend","sendModelReceiveInfo","private_price","onModelRoom","peersTmp","timer","isOnline","isStop","groupLink","joinGroupRoom","onGroupChat","online","joinConversation","startConversation","clearTimeout","setTimeout","filter","p","group_price","likesWidgetService","commentsWidgetService","itemId","item","count","headers","config","totalLikes","checkMe","liked","totalComments","likeThis","likeMe","mediaService","myfiles","fileName","multiple","showDelete","showPreview","allowedTypes","mediaType","parentId","showDone","current","$render","settings","url","method","statusBarWidth","dragdropWidth","onSuccess","files","xhr","file","html","onError","errMsg","deleteCallback","pd","indexOf","deleteImage","splice","deleteVideo","uploadFile","myFiles","uploadName","filename","innerHTML"],"mappings":"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","file":"directive.js","sourcesContent":["/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n\n'use strict';\n\nangular.module('matroshkiApp')\n        .directive('pwCheck', [function () {\n                return {\n                    require: 'ngModel',\n                    link: function (scope, elem, attrs, ctrl) {\n                        var firstPassword = '#' + attrs.pwCheck;\n                        elem.add(firstPassword).on('keyup', function () {\n                            scope.$apply(function () {\n                                // console.info(elem.val() === $(firstPassword).val());\n                                ctrl.$setValidity('pwmatch', elem.val() === $(firstPassword).val());\n                            });\n                        });\n                    }\n                };\n            }])\n\n        .directive('integer', function () {\n            return {\n                require: 'ngModel',\n                link: function (scope, elm, attrs, ctrl) {\n                    ctrl.$validators.integer = function (modelValue, viewValue) {\n                        if (ctrl.$isEmpty(modelValue)) {\n                            // consider empty models to be valid\n                            return true;\n                        }\n                        var INTEGER_REGEXP = /^\\-?\\d+$/;\n                        if (INTEGER_REGEXP.test(viewValue)) {\n                            // it is valid\n                            return true;\n                        }\n\n                        // it is invalid\n                        return false;\n                    };\n                }\n            };\n        })\n        .directive('welcomeMessage', function () {\n            return {\n                restrict: 'AE',\n                scope: {\n                    message: '@message'\n                },\n                controller: function ($scope) {\n                    if ($scope.message != '') {\n                        alertify.message($scope.message, 20);\n                    }\n                }\n            };\n        })\n\n        .directive('validateWebAddress', function () {\n            var URL_REGEXP = /^((?:http|ftp)s?:\\/\\/)(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[\\/?]\\S+)$/i;\n            return {\n                require: 'ngModel',\n                restrict: 'A',\n                link: function (scope, element, attrs, ctrl) {\n                    element.on(\"keyup\", function () {\n                        var isValidUrl = URL_REGEXP.test(element.val());\n                        if (isValidUrl && element.hasClass('alert-danger') || element.val() == '') {\n                            element.removeClass('alert-danger');\n                        } else if (isValidUrl == false && !element.hasClass('alert-danger')) {\n                            element.addClass('alert-danger');\n                        }\n                    });\n                }\n            };\n        })\n        .directive('welcomePopup', [ 'socket', 'userService', '$window', function (socket, userService, $window) {\n            return {\n                restrict: 'EA',\n                scope: {\n                    inRoom: '=inRoom'\n                },\n                controller: function ($scope, $timeout, $uibModal, appSettings) {\n                    \n                    if (!appSettings.USER && !sessionStorage.closePopup) {\n                        $timeout(function () {\n                            var autoInstance = $uibModal.open({\n                                animation: true,\n                                templateUrl: appSettings.BASE_URL + 'app/modals/register-modal/modal.html?v=' + Math.random().toString(36).slice(2),\n                                controller: 'RegisterInstanceCtrl',\n                                backdrop: 'static',\n                                size: 'lg welcome',\n                                keyboard: false\n                            });\n                            autoInstance.result.then(function (res) {\n\n                            });\n                        }, 3);\n                    }\n                    \n                    socket.on('video-chat-request', function (data) {\n                        //get request name\n                        //\n\n                        if (appSettings.USER && appSettings.USER.role == 'model' && appSettings.USER.id == data.model) {\n                            userService.findMember(data.from).then(function (user) {\n\n                                if (user.status == 200 && user.data.id) {\n                                    //show messages for private request\n                                    data.requestUrl = appSettings.BASE_URL + 'models/privatechat/' + data.from + '?roomId=' + data.room + '&vr=' + data.virtualRoom;\n                                    data.name = user.data.firstName + ' ' + user.data.lastName;\n                                    data.username = user.data.username;\n                                    data.avatar = user.data.avatar;\n                                    \n                                    //show as confirm\n                                    if(!$scope.inRoom){\n                                            \n                                            alertify.confirm(data.name + ' send private chat request.', function(){\n                                            $window.location.href = data.requestUrl;\n                                        },function(){\n                                            callBackDenial(data);\n\n                                        }).setting('labels',{'ok':'Accept', 'cancel': 'Deny'}).setHeader('Private Chat').autoCancel(25).setting('modal', false);\n                                    }else{\n                                        var msg = alertify.message('You just received a private call request from ' + data.name + ', click here to accept.',25);\n                                        msg.callback = function (isClicked) {\n                                            if (isClicked)\n                                                $window.location.href = data.requestUrl;\n                                            else\n                                                callBackDenial(data);\n    \n                                        };\n                                    }\n                                }\n                            });\n                        }\n                    });\n                    function callBackDenial(data){\n                        angular.element('ul.list-user li#private-'+data.from).remove();\n                        var totalRequest = angular.element('.tab-content .tab-private ul.list-user li').length;\n\n                        angular.element('span#private-amount').text(totalRequest);\n                        socket.emit('model-denial-request', data.virtualRoom);\n                    }\n                    \n                }\n            };\n        }])\n        .directive('validateEmail', function () {\n            var EMAIL_REGEXP = /^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/;\n\n            return {\n                require: 'ngModel',\n                restrict: '',\n                link: function (scope, elm, attrs, ctrl) {\n                    // only apply the validator if ngModel is present and Angular has added the email validator\n                    if (ctrl && ctrl.$validators.email) {\n\n                        // this will overwrite the default Angular email validator\n                        ctrl.$validators.email = function (modelValue) {\n                            return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\n                        };\n                    }\n                }\n            };\n        })\n        .directive('fallbackSrc', function () {\n            var fallbackSrc = {\n                link: function postLink(scope, iElement, iAttrs) {\n                    iElement.bind('error', function () {\n                        angular.element(this).attr(\"src\", iAttrs.fallbackSrc);\n                    });\n                }\n            }\n            return fallbackSrc;\n        })\n        .directive('emojiInput', [ '$timeout', function ($timeout) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function ($scope, $el, $attr, ngModel) {\n            $.emojiarea.path = '/lib/jquery-emojiarea-master/packs/basic/images';\n            \n            var options = $scope.$eval({wysiwyg:true});\n            var $wysiwyg =  $($el[0]).emojiarea(options);\n            $wysiwyg.on('change', function () {\n                ngModel.$setViewValue($wysiwyg.val());\n                $scope.$apply();\n            });\n            \n         $('.chat-mes').on('keypress',function(e) {\n\n            var code = e.keyCode || e.which;\n            if(code == 13) {\n                angular.element('#send-message').trigger('click');\n               e.preventDefault();\n            }\n         });\n            ngModel.$formatters.push(function (data) {\n                // emojiarea doesn't have a proper destroy :( so we have to remove and rebuild\n                $wysiwyg.siblings('.emoji-wysiwyg-editor, .emoji-button').remove();\n                $timeout(function () {\n                    $wysiwyg.emojiarea(options);\n                }, 0);\n                return data;\n            });\n        }\n    };\n}]);","'use strict';\n\nangular.module('matroshkiApp')\n.directive('videoPlayer', ['$sce', function ($sce) {\n  return {\n    template: '<div><video ng-src=\"{{trustSrc()}}\" id=\"streaming-{{videoId}}\" autoplay  class=\"img-responsive\" height=\"130px\"></video></div>',\n    restrict: 'E',\n    replace: true,\n    scope: {\n      vidSrc: '@',\n      showControl: '@',\n      vid: '@'\n    },\n    link: function (scope, elem, attr) {\n      console.log('Initializing video-player');\n      scope.videoId = scope.vid;\n      scope.trustSrc = function () {\n        if (!scope.vidSrc) {\n          return undefined;\n        }\n        return $sce.trustAsResourceUrl(scope.vidSrc);\n      };\n        if(scope.showControl && elem.context && elem.context.firstChild){\n            elem.context.firstChild.controls = true;\n        }\n        \n    }\n  };\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').directive('convertToNumber', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(val) {\n        return parseInt(val);\n      });\n      ngModel.$formatters.push(function(val) {\n        return '' + val;\n      });\n    }\n  };\n});","'use strict';\n\nangular.module('matroshkiApp').directive('mChatText', ['appSettings', 'chatService', '_', '$uibModal', function (appSettings, chatService, _, $uibModal) {\n    return {\n      restrict: 'AE',\n      templateUrl: appSettings.BASE_URL + 'app/views/partials/chat-text-widget.html',\n      scope: {\n        modelId: '=modelId',\n        chatType: '@chatType',\n        memberId: '@',\n        roomId: '@',\n        isStreaming: '@',\n        streamingInfo : \"=ngModel\"\n      },\n      controller: function ($scope, $timeout, appSettings, PerformerChat, $uibModal, socket, $sce, userService, chatService, onlineService) {\n        $scope.chatPanel = 'chats';\n        //redirect to private chat if group_chat_allowed is no\n\n        $scope.Performerchat = PerformerChat;\n        $scope.chatMessages = [];\n        $scope.lastpage = 1;\n        $scope.orderBy = 'createdAt';\n        $scope.sort = 'desc';\n        $scope.limit = 20;\n        $scope.enableLoadMore = false;\n        $scope.showLoading = false;\n        $scope.isShowPrivateRequest = false;\n        $scope.isOffline = false;\n\n        chatService.findByModel({\n          modelId: $scope.modelId,\n          memberId: $scope.memberId || '',\n          type: $scope.chatType,\n          page: $scope.lastpage,\n          orderBy: $scope.orderBy,\n          sort: $scope.sort,\n          limit: $scope.limit\n        }).success(function (res) {\n          $scope.chatMessages = $scope.chatMessages.concat(res.data);\n          //$scope.gotoAnchor($scope.chatMessages.length - 1);\n\n          if (res.last_page > $scope.lastpage) {\n\n            $scope.lastpage += 1;\n\n            $scope.enableLoadMore = true;\n          } else {\n            $scope.enableLoadMore = false;\n          }\n          $scope.currentpage = res.current_page;\n\n          //scroll to bottom\n          $timeout(function () {\n            $scope.$emit('new-chat-message');\n          });\n        });\n\n        $scope.loadPreviousMessage = function () {\n\n          if ($scope.enableLoadMore) {\n            $scope.showLoading = true;\n            chatService.findByModel({\n              modelId: $scope.modelId,\n              memberId: $scope.memberId || '',\n              type: $scope.chatType,\n              page: $scope.lastpage,\n              orderBy: $scope.orderBy,\n              sort: $scope.sort,\n              limit: $scope.limit\n            }).success(function (res) {\n              $scope.chatMessages = $scope.chatMessages.concat(res.data);\n              $scope.showLoading = false;\n              if (res.last_page > $scope.lastpage) {\n                $scope.lastpage += 1;\n\n                $scope.enableLoadMore = true;\n              } else {\n                $scope.enableLoadMore = false;\n              }\n              $scope.currentpage = res.current_page;\n\n            });\n          }\n        };\n\n        $scope.data = {text: ''};\n//        $.emoticons.define(emoticonsData);\n//        $scope.$on('emoticonsParser:selectIcon', function (event, icon) {\n//          $scope.data.text += ' ' + icon;\n//          $scope.$$phase || $scope.$apply();\n//        });\n\n        //get my info\n        //\n        var myInfo = [];\n        $scope.userData = appSettings.USER;\n\n\n\n        userService.get().then(function (data) {\n          if (data.data != \"\") {\n            $scope.userData = _.clone(data.data);\n            $scope.streamingInfo.tokens = data.data.tokens;\n          } else {\n            $scope.userData = {\n              id: 0,\n              username: 'guest',\n              avatar: ''\n            };\n          }\n        });\n        \n        $scope.members = {};\n        socket.getOnlineMembers($scope.roomId);\n        socket.onlineMembers(function (data) {\n//          console.log(data);\n          $scope.members = angular.copy(data.members);\n          \n          if(appSettings.USERS){\n              \n            _.remove($scope.members, function (currentObject) {\n                \n              return currentObject.id == appSettings.USER.id;\n            });\n         }\n//          console.log('online', data);\n        });\n         socket.onModelReceiveInfo(function (data){\n            if(data.member){\n                var existed = _.find($scope.members, ['id', data.member]);\n                if(existed){\n                    existed.time = (existed.time) ? existed.time + parseInt(data.time) : parseInt(data.time);\n                    existed.spendTokens = (existed.spendTokens) ? existed.spendTokens + parseInt(data.tokens) : parseInt(data.tokens);\n                }\n            } \n         });\n\n        \n        //listen event when member is online\n        socket.onMemberJoin(function (data) {\n//          console.log('onmenberjoin', data);\n          if(data && data.username != 'undefined' && data.id != $scope.modelId){\n//            console.log(data, $scope.members);\n            var extised = _.find($scope.members, ['id', data.id]);\n            if(!extised){\n                $scope.members.push(angular.copy(data));\n            }\n          }\n\n          if ($scope.userData && $scope.userData.role == 'model') {\n            if (data && typeof data.username != 'undefined' && $scope.chatType != 'private') {\n              alertify.message(data.username + \" join the room.\");\n            }\n          }\n          //TODO: get user join data via api and show on model message by userId\n          //update view\n         \n          $scope.$apply();\n        });\n        \n        //listen event when member is leave\n        socket.onLeaveRoom(function (data) {\n//          console.log(data, $scope.chatType);\n          if (($scope.userData && $scope.userData.role == 'model' && data && data.username && $scope.chatType == 'public') || $scope.chatType == 'group') {\n            alertify.message(data.username + \" left the room\");\n            \n          }\n          if($scope.chatType == 'private'){\n//              socket.emit('model-leave-room');\n          }\n          \n          \n          _.remove($scope.members, function (currentObject) {\n            return currentObject.id === data.id;\n          });\n          //update view\n          $scope.$apply();\n        });\n\n\n\n        //if user is not anonymous, join to group chat\n        if (!appSettings.USER) {\n\n          if ($scope.chatType === 'private') {\n            //request to join private room\n            socket.emit('join-private-room', {\n              modelId: $scope.modelId,\n              memberId: $scope.memberId\n            }, function (data) {\n              //assign room id to the thread\n              roomId = data.id;\n            });\n          } else {\n            //join to public room\n            var joinRoomData = {\n              roomId: $scope.roomId,\n              userData: $scope.userData,\n              type: $scope.chatType\n            };\n\n            socket.joinRoom(joinRoomData);\n          }\n        } else {\n          var joinRoomData = {\n            roomId: $scope.roomId,\n            userData: $scope.userData,\n            type: $scope.chatType\n          };\n\n          socket.joinRoom(joinRoomData);\n        }\n\n        $scope.send = function (keyEvent) {\n          if ((keyEvent && keyEvent.keyCode === 13) || !keyEvent) {\n              \n            //allow once user inputs text only\n            var text = $scope.data.text.trim();\n            sendMessage(text);\n            \n            $scope.data.text = '';\n            \n          }\n        };\n\n        //send tips\n        $scope.sendTip = function () {\n\n          alertify.prompt(\"Enter your tips.\", 10,\n                  function (evt, value) {\n                    if (angular.isNumber(parseInt(value)) && parseInt(value) > 0) {\n                      userService.sendTokens($scope.roomId, parseInt(value)).then(function (response)\n                      {\n                        if (response.data.success == false) {\n                          alertify.error(response.data.message);\n                          return;\n                        } else {\n                          alertify.success(response.data.message);\n                          sendMessage('Send ' + parseInt(value) + ' tokens');\n                        }\n                      });\n                    } else {\n                      alertify.error('Please enter a number.');\n                      $scope.sendTip();\n                    }\n\n\n                  });\n        };\n\n\n\n        function sendMessage(message) {\n\n          //check room id\n          //TODO - wait timeout\n          if (!$scope.roomId) {\n            return alertify.notify('Room does not exist.', 'warning');\n          }\n          if (typeof message !== 'undefined' && message != '') {\n            userService.checkBanNick($scope.modelId).then(function (data) {\n              if (data.data.success && data.data.lock == 'no') {\n                var sendObj = {\n                  roomId: $scope.roomId,\n                  text: message,\n                  type: $scope.chatType\n                };\n                if (!appSettings.USER) {\n                  return alertify.alert('Warning', 'Please login to enter new message.');\n\n                }\n\n                //emit chat event to server\n                socket.sendChatMessage(sendObj);\n\n//                var icon = $.emoticons.replace(message);\n                \n                $scope.chatMessages.push({text: message, username: $scope.userData.username, createdAt: new Date(), userId: appSettings.USER.id});\n                $scope.data.text = '';\n                angular.element('.emoji-wysiwyg-editor').focus();\n                $scope.$emit('new-chat-message');\n              } else {\n                alertify.error(data.data.message);\n              }\n\n            });\n\n          }\n        }\n\n        /**\n         * @requires user is premium and premium chat only\n         * @returns check and process payment for premium\n         */\n        if ($scope.chatType != 'public' && !appSettings.USER) {\n          alertify.alert('Warning', 'Please login to join this room.');\n          window.location.href = '/';\n        }\n\n\n\n        \n\n        //add handler for new message from server\n        socket.onReceiveChatMessage(function (data) {\n//          var icon = data.text;\n//\n//          icon = $.emoticons.replace(data.text);\n//        console.log(data.message.ownerId);\n          $scope.chatMessages.push({text: data.text, username: data.username, createdAt: data.createdAt, userId: data.message.ownerId});\n          //calculate position and scroll to bottom\n          $scope.$emit('new-chat-message');\n        });\n        //get send tip event\n        socket.onReceiveTip(function (data) {\n          $scope.chatMessages.push({text: data.text, tip: 'yes', username: data.username, createdAt: data.createdAt});\n          //calculate position and scroll to bottom\n          $scope.$emit('new-chat-message');\n        });\n        \n        \n        //check group and private chat init\n        socket.reqPrivateChat($scope.modelId);\n        socket.reqGroupChat($scope.modelId);\n        $scope.banNick = function (user, index) {\n          userService.addBlackList(user.username).then(function (data) {\n            if (data.data.success) {\n              alertify.success(data.data.message);\n              _.findIndex($scope.chatMessages, function (o) {\n                if (o.username == user.username) {\n                  o.banStatus = 'yes';\n                }\n              });\n            } else {\n              alertify.error(data.data.message);\n            }\n          });\n        };\n        $scope.unlockNick = function (user, index) {\n          userService.removeBlackList(user.username).then(function (data) {\n            if (data.data.success) {\n              alertify.success(data.data.message);\n              _.findIndex($scope.chatMessages, function (o) {\n                if (o.username == user.username) {\n                  o.banStatus = 'no';\n                }\n              });\n            } else {\n              alertify.error(data.data.message);\n            }\n          });\n        };\n        \n        if(appSettings.USER && $scope.modelId == appSettings.USER.id){\n            $scope.isShowPrivateRequest = true;\n        }\n        \n         //TODO - move to global controller\n        //this is for test only\n        $scope.videoRequests = [];\n        socket.on('video-chat-request', function (data) {\n          //get request name\n          //\n//          console.log(data);\n          if($scope.modelId == data.model){\n            userService.findMember(data.from).then(function (user){\n\n              if(user.status == 200 && user.data.id){\n                //show messages for private request\n                data.requestUrl = appSettings.BASE_URL + 'models/privatechat/' + data.from + '?roomId=' + data.room + '&vr=' +data.virtualRoom;\n                data.name = user.data.firstName + ' ' + user.data.lastName;\n                data.username = user.data.username;\n                data.avatar = user.data.avatar;\n                data.id = user.data.id;\n                var existed = _.find($scope.videoRequests, ['from', data.from]);\n                if(existed){\n                    existed.requestUrl = data.requestUrl;\n                }else{\n                      $scope.videoRequests.push(data);\n                }\n  //              console.log(data);\n  //              $scope.videoRequests = _.uniqBy($scope.videoRequests, 'from');\n              }\n            });\n            }\n        });\n        \n  \n      }\n    };\n  }\n])\n        .directive('mChatScroll', ['$', function ($) {\n            return {\n              link: function (scope, ele) {\n                scope.$on('new-chat-message', function () {\n\n                  //check current scroll of the div\n//                  var height = $('.list-chat', $(ele)).outerHeight();\n\n                  //TODO - check position on scroll\n//                  if($ele.scrollTop() + $ele.innerHeight() >= $(ele)[0].scrollHeight) {\n//                    alert('end reached');\n//                  }\n//                  \n\n                  var height = $('.list-chat', $(ele)).height();\n                  ele.find('li').each(function (i, value) {\n                    height += parseInt($(this).outerHeight());\n                  });\n\n                  $('.list-chat', ele).animate({scrollTop: height});\n//                  ele.animate({scrollTop: height});\n                });\n              }\n            };\n          }]);","'use strict';\n\nangular.module('matroshkiApp')\n.directive('mPrivateChatVideo', ['appSettings', '$timeout', '$interval', 'socket', 'VideoStream', 'peerService', '$sce', 'userService', 'onlineService', function(appSettings, $timeout, $interval, socket, VideoStream, peerService, $sce, userService, onlineService) {\n  return {\n    restrict: 'AE',\n    templateUrl: appSettings.BASE_URL + 'app/views/partials/private-chat-video-widget.html',\n    scope: {\n      modelId: '=modelId',\n      memberId: '=memberId',\n      room: '@',\n      virtualRoom: '@',\n      streamingInfo : \"=ngModel\"\n    },\n    controller: function($scope, socket, userService, PerformerChat, $timeout, $window) {\n      //TODO - check settings about limit/restriction\n      var stream;\n      var localStream = null;\n      $scope.initVideoCall = false;\n      $scope.streamURL = null;\n      $scope.showMyCam = true;\n      $scope.streamingInfo.type = 'private';\n      $scope.streamingInfo.hasRoom = true;\n      $scope.streamingInfo.removeMyRoom = false;\n      $scope.accept = false;\n      $scope.deny = false;\n      var stop;\n      $scope.second = 60;\n\n      //create request\n      var createStream = function(virtualRoom, room, userType) {\n        VideoStream.get()\n        .then(function (s) {\n          localStream = s;\n          stream = s;\n          peerService.init(stream);\n          stream = URL.createObjectURL(stream);\n          //TODO - get room from onfig\n          $scope.initVideoCall = true;\n          //\n          peerService.joinRoom(virtualRoom, {\n            memberId: $scope.memberId,\n            modelId: $scope.modelId,\n            room: room\n          });\n          $scope.showMyCam = true;\n          $timeout(function(){\n              if($scope.hasRoom){\n                //action to show / hide cancel button\n                \n              }\n          }, 3000);\n          if (userType === 'model') {\n                  $scope.modelStreaming = true;\n          }else{\n            $scope.userStreaming = true;\n          }\n        }, function (err) {\n          $scope.initVideoCall = false;\n          $scope.error = 'No audio/video permissions. Please refresh your browser and allow the audio/video capturing.';\n          alertify.error($scope.error);\n        });\n      };\n\n      //member send request to model\n      $scope.sendCallRequest = function () {\n          //check user token before start connect.\n          userService.get().then(function (data) {\n          if (data.data) {\n            if(parseInt(data.data.tokens) < 100){\n                return alertify.error('Your tokens do not enought, please buy more.');\n                \n            }else{\n                createStream($scope.virtualRoom, $scope.room, 'user');\n                $timeout(function (){\n                    if(!$scope.accept && !$scope.deny){\n                        alertify.warning('Has no response from model, please connect with another model', 60);\n                    }\n                }, 30000);\n            }\n            \n          } else {\n            return false;\n          }\n        });\n        \n      };\n\n      //model accept to join the toom\n      $scope.acceptRequest = function() {\n        createStream($scope.virtualRoom, $scope.room, 'model');\n      };\n\n      $scope.stopStreaming = function() {\n        if(localStream){\n            localStream.getVideoTracks()[0].stop();\n            localStream.getAudioTracks()[0].stop();\n            socket.emit('model-leave-room');\n        }\n        //stop streaming in the client side?\n        $scope.showMyCam = false;\n        if (angular.isDefined(stop)) {\n            $interval.cancel(stop);\n            stop = undefined;\n        }\n        //call an event to socket\n        $scope.streamingInfo.removeMyRoom = true;\n        if(appSettings.USER.role == 'model'){\n            $timeout(function (){\n                $window.location.href = '/models/live';\n            }, 30000);\n        }\n        \n      };\n      \n      //room has removed\n        socket.on('room-has-removed', function (data){\n//            if(localStream){\n//                $scope.streamingInfo.hasRoom = false;\n//            }\n//            socket.emit('model-leave-room');\n            $scope.streamingInfo.hasRoom = false;\n            alertify.message('Broadcast has been removed', 30);\n            if(appSettings.USER.role == 'model'){\n                $timeout(function (){\n                    $window.location.href = '/models/live';\n                }, 30000);\n            }\n            //$scope.stopStreaming();\n            \n//            $scope.stopStreaming();\n        });\n\n      $scope.peers = [];\n      $scope.streamActive = 0;\n      $scope.streamingInfo.status = 'inactive';\n      peerService.on('peer.stream', function (peer) {\n          \n          $scope.accept = true;\n        $scope.streamingInfo.status = 'active';\n        $scope.peers.push({\n          id: peer.id,\n          stream: URL.createObjectURL(peer.stream)\n        });\n        if (!$scope.streamUrl) {\n          $scope.streamUrl = URL.createObjectURL(peer.stream);\n        }\n        if($scope.userStreaming){\n            stop = $interval(function () {\n\n                if($scope.second === 60){\n                    $scope.second = 0;\n                    var vid = document.getElementById(\"private-video-client\");\n    //                console.log('current time: ', vid.currentTime);\n                    $scope.streamingInfo.time++; //(vid.currentTime > 60) ? parseInt(vid.currentTime/60) : 0;\n                    sendPaidTokens();\n                }\n                $scope.second++;\n            }, 1000);\n        }\n      });\n      \n      socket.on('model-denial-request', function (){\n        alertify.message('Model has denied your request.', 50);\n        $scope.deny = true;\n      });\n\n      peerService.on('peer.disconnected', function (peer) {\n//          console.log('User disconnected', peer);\n          $scope.streamingInfo.hasRoom = false;\n          $scope.streamingInfo.message = 'Broastcat has been removed.';\n          $scope.stopStreaming();\n//          console.log('stop peer', peer);\n//          $scope.streamingInfo.status = 'inactive';\n//        $scope.peers = $scope.peers.filter(function (p) {\n//          return p.id !== peer.id;\n//        });\n            $scope.peers = {};\n      });\n      socket.emit('has-video-call', $scope.virtualRoom, function(has) {\n        \n            if (!has && appSettings.USER && appSettings.USER.role == 'model') {\n              $scope.streamingInfo.hasRoom = false;\n            }\n        });\n      \n\n      $scope.streamUrl = null;\n      $scope.changeCam = function (key) {\n        $scope.streamUrl = $scope.peers[key].stream;\n        $scope.streamActive = key;\n      };\n\n      $scope.getLocalVideo = function () {\n        return $sce.trustAsResourceUrl(stream);\n      };\n\n      $scope.userRole = appSettings.USER.role;\n      \n      /**\n        * process payment per minute\n        */\n       function sendPaidTokens() {\n           userService.sendPaidTokens($scope.modelId, 'private').then(function (response)\n           {\n             if(response.data && parseInt(response.data.spend) > 0){\n                 $scope.streamingInfo.spendTokens += parseInt(response.data.spend);\n//                 $scope.streamingInfo.time += 1;\n                 $scope.streamingInfo.tokens = response.data.tokens;\n                 socket.sendModelReceiveInfo({time: 1, tokens: response.data.spend});\n//                 $scope.$apply();\n             }\n             if (response.data.success == false || parseInt(response.data.tokens) < PerformerChat.private_price) {\n\n                 alertify.error('Your tokens do not enough, please buy more.', 60);\n                 socket.emit('member-missing-tokens', $scope.chatType);\n                 $scope.stopStreaming();\n//                 clearInterval(sendTokens);\n                 return;\n             }\n\n    //            alertify.notify(response.data.message);\n           });\n         }\n\n         //loop\n         //TODO Set purchase popup here\n//           var sendTokens = setInterval(function () {\n//             //check streaming\n//             //call via api\n//               if($scope.userStreaming && $scope.showMyCam){\n//                 onlineService.checkOnline(parseInt($scope.room), 'private').success(function (res) {\n//\n//                   if (res == 1) {\n//\n//                         sendPaidTokens();\n//\n//                   } else {\n//                       \n////                    alertify.warning('Model left the room.', 60);\n//                       \n//                     //clearInterval(sendTokens);\n//                   }\n//                 });\n//               }\n//           }, 60000);\n    }\n  };\n}]);","'use strict';\n\nangular.module('matroshkiApp')\n        .directive('mGroupChatVideo', ['appSettings', '$timeout', '$interval', 'socket', 'VideoStream', 'peerService', '$sce', 'onlineService', 'userService', function (appSettings, $timeout, $interval, socket, VideoStream, peerService, $sce, onlineService, userService) {\n            return {\n              restrict: 'AE',\n              templateUrl: appSettings.BASE_URL + 'app/views/partials/group-chat-video-widget.html',\n              scope: {\n                modelId: '=modelId',\n                memberId: '=memberId',\n                room: '@',\n                onModelRoom: '@',\n                virtualRoom: '@',\n                streamingInfo : \"=ngModel\"\n              },\n              controller: function ($scope, userService, PerformerChat, $window) {\n                //TODO - check settings about limit/restriction\n                var stream;\n                var localStream = null;\n                $scope.initVideoCall = false;\n                $scope.streamURL = null;\n                $scope.peers = [];\n                $scope.peersTmp = [];\n                $scope.timer = null;\n                $scope.isOnline = null;\n                $scope.showMyCam = true;\n                $scope.isStop = false;\n                $scope.streamingInfo.type = 'group';\n                $scope.groupLink = null;\n                var stop;\n                $scope.second = 60;\n               \n\n//                console.log($scope.onModelRoom); \n               \n//peerService.createRoom();\n\n                //create request\n                var createStream = function (virtualRoom, room, userType) {\n                    // Don't start a new fight if we are already fighting\n                    if ( angular.isDefined(stop) ) return;\n                            \n                  VideoStream.get()\n                          .then(function (s) {\n                            stream = s;\n                            localStream = s;\n                            peerService.init(stream);\n                            stream = URL.createObjectURL(stream);\n                            //init my cam\n                            $scope.peers.push({\n                              id: 0,\n                              stream: stream\n                            });\n                              $scope.peersTmp.push({\n                              id: 0,\n                              stream: stream\n                            });\n                            $scope.streamUrl = stream;\n                            //TODO - get room from onfig\n                            $scope.initVideoCall = true;\n                            $scope.showMyCam = true;\n                            //action to show / hide cancel button\n                            if (userType === 'model') {\n                              $scope.modelStreaming = true;\n                            } else {\n                              $scope.userStreaming = true;\n                            }\n                            //\n                            peerService.joinGroupRoom(virtualRoom, {\n                              memberId: $scope.memberId,\n                              modelId: $scope.modelId,\n                              type: 'group',\n                              room: room\n                            });\n                            \n                           if($scope.userStreaming){\n                                stop = $interval(function () {\n//                                    console.log('Second: ', $scope.second);\n                                    if($scope.second === 60){\n                                        $scope.second = 0;\n                                        \n//                                        var vid = document.getElementById(\"streaming-0\");\n//                                        console.log('current time: ', $scope.streamingInfo.time);\n                                        $scope.streamingInfo.time++; //(vid.currentTime > 60) ? parseInt(vid.currentTime/60) : 0;\n                                        sendPaidTokens();\n                                    }\n                                    $scope.second++;\n                                }, 1000);\n                            }\n                            \n                          }, function (err) {\n                            \n                            $scope.initVideoCall = false;\n                            \n                            $scope.error = 'No audio/video permissions. Please refresh your browser and allow the audio/video capturing.';\n                            alertify.message($scope.error, 20);\n                          });\n                };\n                \n                socket.onLeaveRoom(function (data) {\n                  if(data.id == $scope.modelId){\n                    $scope.isOnline = false;\n                    $scope.initVideoCall = false;\n                    $scope.userStreaming = false;\n                    $scope.modelStreaming = false;\n                    $scope.peers = [];\n                  }\n                  $scope.$apply();\n                });\n                socket.onGroupChat(function (data) {\n                    \n                  if($scope.modelId == data.model){\n                      if(data.virtualRoom == $scope.virtualRoom){\n                        $scope.isOnline = data.online;\n                        $scope.groupLink = null;\n                      }else if(data.virtualRoom){\n                        $scope.groupLink = '/members/groupchat/'+ data.model+'?vr='+data.virtualRoom;\n                      }\n                    \n                  }\n                });\n                \n                \n                //member send request to model\n//                onlineService.checkOnline(parseInt($scope.room), 'group').success(function (res) {\n//                    if (res == 1) {\n//                      $scope.isOnline = true;\n//                    } else {\n//                      $scope.isOnline = false;\n////                      $scope.$apply();\n//                    }\n//                  });\n\n\n                $scope.joinConversation = function () {\n                    //check user token before start connect.\n                    userService.get().then(function (data) {\n                    if (data.data) {\n                      if(parseInt(data.data.tokens) < 100){\n                          return alertify.error('Your tokens do not enought, please buy more.');\n\n                      }else{\n                          createStream($scope.virtualRoom, $scope.room, 'user');\n                          \n                           \n                      }\n\n                    } else {\n                      return false;\n                    }\n                  });\n\n                  \n                };\n\n                //model accept to join the toom\n                $scope.startConversation = function () {\n                  createStream($scope.virtualRoom, $scope.room, 'model');\n                };\n                \n                $scope.stopStreaming = function() {\n                    if(localStream){\n                        localStream.getVideoTracks()[0].stop();\n                        localStream.getAudioTracks()[0].stop();\n                        socket.emit('model-leave-room');\n                    }\n                    //stop streaming in the client side?\n                    $scope.showMyCam = false;\n                    //call an event to socket\n                    $scope.initVideoCall = false;\n                    $scope.isStop = true;\n                    if (angular.isDefined(stop)) {\n                      $interval.cancel(stop);\n                      stop = undefined;\n                    }\n                    if(appSettings.USER.role == 'model'){\n                        $timeout(function (){\n                            $window.location.href = '/models/live';\n                        }, 30000);\n                    }\n//                    console.log($scope.peers);\n                  };\n\n\n\n                $scope.streamActive = 0;\n                \n\n                peerService.on('peer.stream', function (peer) {\n                    clearTimeout( $scope.timer);\n//                  console.log('Client connected, adding new stream');\n                    if(peer.id != 0 || (peer.id == 0 && $scope.modelId != $scope.memberId )){\n                        $scope.peersTmp.push({\n                            id: peer.id,\n                            stream: URL.createObjectURL(peer.stream)\n                        });\n                    }\n                    if (!$scope.streamUrl) {\n                        $scope.streamUrl = URL.createObjectURL(peer.stream);\n                    }\n                    $scope.timer = setTimeout(function(){\n                        $scope.peers = $scope.peersTmp;\n                        $scope.$apply();\n                       \n                    },1000);\n                });\n                peerService.on('group.disconnected', function (peer) {\n//                  console.log('Client disconnected', peer);\n                  //check has room\n                socket.emit('has-group-room', $scope.virtualRoom, function(has) {\n                    \n                    $scope.isOnline = has;\n                });\n                \n                  $scope.peers = $scope.peers.filter(function (p) {\n                    return p.id !== peer.id;\n                  });\n\t\t\t\t  $scope.peersTmp = $scope.peersTmp.filter(function (p) {\n                    return p.id !== peer.id;\n                  });\n                });\n                \n                //check has room\n                socket.emit('has-group-room', $scope.virtualRoom, function(has) {\n//                    console.log($scope.virtualRoom, has);\n                    $scope.isOnline = has;\n                });\n\n                $scope.changeCam = function (key) {\n//                  console.log(key, $scope.peers);\n                  $scope.streamUrl = $scope.peers[key].stream;\n                  $scope.streamActive = key;\n                };\n\n                $scope.getLocalVideo = function () {\n                  $scope.streamActive = 0;\n                  return $sce.trustAsResourceUrl($scope.streamUrl);\n\n                };\n\n                $scope.userRole = appSettings.USER.role;\n            \n                /**\n                 * process payment per minute\n                 */\n                function sendPaidTokens() {\n                    userService.sendPaidTokens($scope.modelId, 'group').then(function (response)\n                    {\n                      if(response.data && parseInt(response.data.spend) > 0){\n                          $scope.streamingInfo.spendTokens += parseInt(response.data.spend);\n//                          $scope.streamingInfo.time += 1;\n                          $scope.streamingInfo.tokens = response.data.tokens;\n                          socket.sendModelReceiveInfo({member: $scope.memberId, time: 1, tokens: response.data.spend});\n//                          console.log($scope.streamingInfo);\n//                          $scope.$apply();\n                      }\n                      if (response.data.success == false || parseInt(response.data.tokens) < PerformerChat.group_price) {\n\n                          alertify.warning('Your tokens do not enough, please buy more.', 60);\n                          socket.emit('member-missing-tokens', $scope.chatType);\n                          $scope.stopStreaming();\n                         // clearInterval(sendTokens);\n                          return;\n                      }\n\n          //            alertify.notify(response.data.message);\n                    });\n                  }\n                  \n                  //loop\n                  //TODO Set purchase popup here\n//                    var sendTokens = setInterval(function () {\n//                      //check streaming\n//                      //call via api\n//                        if($scope.userStreaming && $scope.showMyCam && $scope.isOnline){\n//                          onlineService.checkOnline(parseInt($scope.room), 'group').success(function (res) {\n//\n//                            if (res == 1) {\n//\n//                                  sendPaidTokens();\n//\n//                            } else {\n//                             // clearInterval(sendTokens);\n//                            }\n//                          });\n//                        }\n//                    }, 60000);\n\n              }\n            };\n          }]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n'use strict';\n\nangular.module('matroshkiApp').directive('commentLikeShare', ['appSettings', 'likesWidgetService', 'commentsWidgetService', function (appSettings, likesWidgetService, commentsWidgetService) {\n    return {\n      restrict: 'AE',\n      templateUrl: appSettings.BASE_URL + 'app/views/partials/comment-like-share-widget.html',\n      scope: {\n        itemId: '@',\n        item: '@'\n      },\n      controller: function ($scope) {\n        likesWidgetService.count({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n          $scope.totalLikes = data;\n        });\n        //check like status\n        likesWidgetService.checkMe({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n          $scope.liked = data;\n\n        });\n\n        //count comment\n        commentsWidgetService.count({itemId: $scope.itemId, item: $scope.item}).success(function (data) {\n          $scope.totalComments = data;\n        });\n        $scope.likeThis = function () {\n          likesWidgetService.likeMe({itemId: $scope.itemId, status: $scope.liked, item: $scope.item}).then(function (data, status, headers, config) {\n            if (data.data.status == 'error') {\n              alertify.warning(data.data.message);\n              return;\n            }\n            $scope.liked = (data.data.status == 'like') ? 1 : 0;\n            likesWidgetService.count({itemId: $scope.itemId, item: $scope.item}).success(function (data, status, headers, config) {\n              $scope.totalLikes = data;\n            });\n          });\n        };\n      }\n    };\n  }]);\n\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n'use strict';\n\nangular.module('matroshkiApp').directive('uploadFile', ['appSettings', 'mediaService', function (appSettings, mediaService) {\n\n    return {\n      restrict: 'AE',\n      template: '<div><input type=\"hidden\" name=\"myFiles\" ng-model=\"myFiles\"><div id=\"mulitplefileuploader\">Upload</div><div id=\"status\"></div></div>',\n      require: 'ngModel',\n      replace: true,\n      scope: {\n        myfiles: '=ngModel',\n        fileName: '@',\n        multiple: '@',\n        showDelete: '@',\n        showPreview: '@',\n        allowedTypes: '@',\n        mediaType: '@',\n        parentId: '@',\n        showDone: '@'\n      },\n//      templateUrl: appSettings.BASE_URL + 'app/views/partials/editor.html',\n      link: function (scope, elem, attr, ngModel) {\n        var current = [];\n//        scope.myPhotos = ngModelCtrl;\n        if (!ngModel)\n          return; // do nothing if no ng-model\n\n        // Specify how UI should be updated\n//        ngModel.$render = function () {\n//          \n//        };\n        ngModel.$render = function () {\n//          elem.html(ngModel.$viewValue || '');\n        };\n        var mediaType = (scope.mediaType) ? scope.mediaType : '';\n        var parentId = (scope.parentId) ? scope.parentId : 0;\n        var settings = {\n          url: appSettings.BASE_URL + 'api/v1/upload-items?parent-id='+parentId+'&mediaType='+mediaType,\n          method: \"POST\",\n          allowedTypes: \"jpg,png,gif,jpeg,mp4,m4v,ogg,ogv,webm\",\n          fileName: \"myFiles\",\n          multiple: true,\n          showDelete: true,\n          showPreview: false,\n          showDone: true,\n          statusBarWidth: '55%',\n          dragdropWidth: '55%',\n          onSuccess: function (files, data, xhr)\n          {\n\n            if (data.success == true) {\n//              ngModelCtrl.$viewValue = data.fileName;\n//              scope.$apply(function () {\n//                ngModelCtrl.$setViewValue(data.fileName);\n//                ngModelCtrl.$setViewValue('StackOverflow');\n//              });\n//              scope.$watch('myPhotos', function (value) {\n//                if (ngModelCtrl.$viewValue != value) {\n//                  ngModelCtrl.$setViewValue(data.fileName);\n//                  \n//                }\n//              });\n\n\n              current.push(data.file.id);\n              ngModel.$setViewValue(current);\n\n              $(\"#status\").html(\"<font color='green'>\" + data.message + \"</font>\");\n            } else {\n              $(\"#status\").html(\"<font color='red'>\" + data.message + \"</font>\");\n            }\n\n          },\n          onError: function (files, status, errMsg)\n          {\n            $(\"#status\").html(\"<font color='red'>Upload is Failed</font>\");\n          },\n          deleteCallback: function (element, data, pd) {\n\n            if (element.file.type.indexOf('image') != -1) {\n              mediaService.deleteImage(element.file.id).then(function (data) {\n                if (data.data.success) {\n                  var index = current.indexOf(element.file.id);\n                  current.splice(index, 1);\n                  ngModel.$setViewValue(current);\n                  alertify.success(data.data.message);\n                } else {\n                  alertify.error(data.data.message);\n                }\n              });\n            } else if (element.file.type.indexOf('video') != -1) {\n              mediaService.deleteVideo(element.file.id).then(function (data) {\n                if (data.data.success) {\n                  var index = current.indexOf(element.file.id);\n                  current.splice(index, 1);\n                  ngModel.$setViewValue(current);\n                  alertify.success(data.data.message);\n                } else {\n                  alertify.error(data.data.message);\n                }\n              });\n            }\n          }\n        };\n        $(\"#mulitplefileuploader\").uploadFile(settings);\n\n      }\n\n\n    };\n  }]);\n\n","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n'use strict';\n\nangular.module('matroshkiApp').directive('multipleUpload', ['appSettings', 'mediaService', function (appSettings, mediaService) {\n\n    return {\n      restrict: 'AE',\n      template: '<div><input type=\"hidden\" name=\"myfiles\" ng-model=\"myFiles\"><div id=\"mulitplefileuploader\">Upload</div><div id=\"status\"></div></div>',\n      require: 'ngModel',\n      replace: true,\n      scope: {\n        files: '=ngModel',\n        fileName: '@',\n        multiple: '@',\n        showDelete: '@',\n        showPreview: '@',\n        allowedTypes: '@',\n        mediaType: '@',\n        parentId: '@',\n        showDone: '@',\n        modelId: '@'\n      },\n      link: function (scope, elem, attr, ngModel) {\n        var myFiles = [];\n\n        if (!ngModel)\n          return; // do nothing if no ng-model\n\n        // Specify how UI should be updated\n//        ngModel.$render = function () {\n//          \n//        };\n\n        ngModel.$render = function () {\n\n        };\n        var mediaType = (scope.mediaType) ? scope.mediaType : '';\n        var parentId = (scope.parentId) ? scope.parentId : null;\n        var modelId = (scope.modelId) ? scope.modelId : null;\n        var settings = {\n          url: appSettings.BASE_URL + 'api/v1/upload-items?mediaType=' + mediaType + '&parent-id=' + parentId + '&model-id=' + modelId,\n          method: \"POST\",\n          allowedTypes: scope.allowedTypes,\n          fileName: 'myFiles',\n          multiple: scope.multiple,\n          showDelete: scope.showDelete,\n          showPreview: scope.showPreview,\n          showDone: scope.showDone,\n          statusBarWidth: '100%',\n          dragdropWidth: '100%',\n          onSuccess: function (files, data, xhr, pd)\n          {\n\n            if (data.success == true) {\n\n              myFiles.push(data.file);\n\n              ngModel.$setViewValue(myFiles);\n//              alertify.success(files);\n//              console.log(pd);\n              var uploadName = pd.filename[0].innerHTML;\n              alertify.success(uploadName + ' ' + data.message)\n//              $(\"#status\").html(\"<font color='green'>\" + data.message + \"</font>\");\n            } else {\n//              $(\"#status\").html(\"<font color='red'>\" + data.message + \"</font>\");\n              alertify.error(data.message);\n            }\n\n          },\n          onError: function (files, status, errMsg)\n          {\n            $(\"#status\").html(\"<font color='red'>Upload is Failed</font>\");\n          },\n          deleteCallback: function (element, data, pd) {\n\n            if (element.file.type.indexOf('image') != -1) {\n              mediaService.deleteImage(element.file.id).then(function (data) {\n                if (data.data.success) {\n                  var index = myFiles.indexOf(element.file.id);\n                  myFiles.splice(index, 1);\n                  ngModel.$setViewValue(myFiles);\n                  alertify.success(data.data.message);\n                } else {\n                  alertify.error(data.data.message);\n                }\n              });\n            } else if (element.file.type.indexOf('video') != -1) {\n              mediaService.deleteVideo(element.file.id).then(function (data) {\n                if (data.data.success) {\n                  var index = myFiles.indexOf(element.file.id);\n                  myFiles.splice(index, 1);\n                  ngModel.$setViewValue(myFiles);\n                  alertify.success(data.data.message);\n                } else {\n                  alertify.error(data.data.message);\n                }\n              });\n            }\n          }\n        };\n        $(\"#mulitplefileuploader\").uploadFile(settings);\n\n      }\n\n\n    };\n  }]);\n\n"]}