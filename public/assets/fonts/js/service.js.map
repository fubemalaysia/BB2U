{"version":3,"sources":["user.service.js","auth.service.js","chat.service.js","socket.service.js","peer.service.js","video-stream.service.js","chat-settings.service.js","online.service.js","video.service.js","gallery.service.js","media.service.js"],"names":["angular","module","factory","$http","$q","appSettings","commonHelper","get","BASE_URL","findAll","params","query","obToquery","findMember","id","findById","getPerformer","findByRoom","roomId","countModelOnline","changeAccountStatus","status","method","url","data","then","cb","res","error","err","changeAccountRole","role","sendTokens","modelId","tokens","options","successCallback","response","errorCallback","sendPaidTokens","type","chatType","updateOtherSetting","setting","updateContact","contact","updatePayment","payment","suspendAccount","updatePerformer","performer","profile","updateStudioProfile","setProfile","imageId","checkPremium","room","addBlackList","removeBlackList","checkBanNick","userService","$cookieStore","currentUser","login","user","callback","noop","deferred","defer","post","username","password","success","put","token","resolve","logout","reject","bind","promise","resetPassword","ppSettings","email","confirmPassword","forgotPassword","remove","createUser","$promise","changePassword","oldPassword","newPassword","getCurrentUser","isLoggedIn","hasOwnProperty","isLoggedInAsync","catch","getToken","recoverPassword","confirmResetPasswordToken","findByModel","sendInstantTokens","sendTipTokens","sendOfflineTokens","socketFactory","$window","ioSocket","io","SOCKET_URL","TOKEN","path","socket","on","alert","location","href","syncUpdates","modelName","array","item","oldItem","_","find","_id","index","indexOf","event","splice","push","unsyncUpdates","removeAllListeners","sendChatMessage","emit","onReceiveChatMessage","sendTip","onReceiveTip","joinRoom","joinPrivateRoom","onLeaveRoom","onMemberJoin","onModelOnline","getCurrentModelOnline","onCurrentModelOnline","getOnlineMembers","onlineMembers","reqGroupChat","reqPrivateChat","onGroupChat","onModelInitPublicChat","getModelStreaming","model","sendModelReceiveInfo","onModelReceiveInfo","onModelStreaming","$rootScope","iceConfig","TURN_CONFIG","peerConnections","currentId","stream","peers","getPeerConnection","pc","RTCPeerConnection","addStream","onicecandidate","evnt","by","to","ice","candidate","onaddstream","console","log","api","trigger","$$digest","$apply","makeOffer","createOffer","sdp","setLocalDescription","e","mandatory","OfferToReceiveVideo","OfferToReceiveAudio","handleMessage","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","connected","addHandlers","r","roomid","createRoom","d","joinGroupRoom","createGroupRoom","init","s","EventEmitter","call","Object","setPrototypeOf","prototype","a","b","when","c","navigator","getUserMedia","video","audio","update","getChatPrice","getTopModels","getModelsByCategory","category","checkOnline","getModelRotateImages","thread","setFavorite","checkExist","create","setVideoStatus","findVideoById","getModelVideos","page","findMyGalleries","getModelGalleries","setGalleryStatus","deleteGallery","findProfileByMe","findMyMediaGallery","findMyVideoGallery","setMainImage","checkOwner","setMediaStatus","deleteImage","deleteVideo"],"mappings":"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","file":"service.js","sourcesContent":["angular.module('matroshkiApp').factory('userService', function ($http, $q, appSettings, commonHelper) {\n  return{\n    get: function () {\n      return $http.get(appSettings.BASE_URL + 'api/v1/findMe');\n    },\n    findAll: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/find-all?' + query);\n    },\n    findMember: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/findMember/' + id);\n    },\n    findById: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/find-by-id/' + id);\n    },\n    getPerformer: function () {\n      return $http.get(appSettings.BASE_URL + 'api/v1/profile/performer');\n    },\n    findByRoom: function (roomId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/members/find-by-room/' + roomId);\n    },\n    countModelOnline: function () {\n      return $http.get(appSettings.BASE_URL + 'api/v1/online/count');\n    },\n    changeAccountStatus: function (id, status) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/user/account-status/' + id,\n        data: {\n          status: status\n        }\n      }).then(function cb(res) {\n        return res;\n      }, function error(err) {\n        return err;\n      });\n    },\n    changeAccountRole: function (id, role) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/user/account-role/' + id,\n        data: {\n          role: role\n        }\n      }).then(function cb(res) {\n        return res;\n      }, function error(err) {\n        return err;\n      });\n    },\n    sendTokens: function (modelId, tokens, options) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/member/send-tokens',\n        data: {\n          modelId: modelId,\n          tokens: tokens,\n          options: options\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    sendPaidTokens: function (modelId, type) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/member/send-paid-tokens',\n        data: {\n          modelId: modelId,\n          chatType: type\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    updateOtherSetting: function (setting) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/users/model/other-settings',\n        data: setting\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    updateContact: function (contact) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/users/model/update-contact',\n        data: contact\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    updatePayment: function (payment) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/users/model/update-payment',\n        data: payment\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    suspendAccount: function (data) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/users/model/suspend',\n        data: data\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    updatePerformer: function (performer, profile) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/users/model/performer',\n        data: {\n          performer: performer,\n          profile: profile\n        }\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    updateStudioProfile: function (profile) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/studio/profile',\n        data: profile\n      }).then(function successCallback(res) {\n        return res;\n      }, function errorCallback(err) {\n        return err;\n      });\n    },\n    setProfile: function (imageId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/me/profile/image/' + imageId);\n    },\n    checkPremium: function (room) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/me/check-premium/' + room);\n    },\n    addBlackList: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/add-black-list/' + id);\n    },\n    removeBlackList: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/remove-black-list/' + id);\n    },\n    checkBanNick: function (modelId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/check-black-list/' + modelId);\n    }\n  };\n});","angular.module('matroshkiApp')\n.factory('authService', [ '$http', 'userService', '$cookieStore', '$q', 'appSettings', function ($http, userService, $cookieStore, $q, appSettings) {\n  var currentUser = userService.get();\n  return {\n    /**\n     * Authenticate user and save token\n     *\n     * @param  {Object}   user     - login info\n     * @param  {Function} callback - optional\n     * @return {Promise}\n     */\n    login: function (user, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.post(appSettings.BASE_URL + 'api/v1/auth/login', {\n        username: user.username,\n        password: user.password\n      })\n      .success(function (data) {\n        $cookieStore.put('token', data.token);\n        currentUser = userService.get();\n        deferred.resolve(data);\n        return cb();\n      })\n      .error(function (err) {\n        this.logout();\n        deferred.reject(err);\n        return cb(err);\n      }.bind(this));\n\n      return deferred.promise;\n    },\n    /*\n     * Update password after confirm email\n     * @returns {function}\n     */\n    resetPassword: function (user) {\n      return $http.post(ppSettings.BASE_URL + 'api/v1/users/resetPassword', {\n        email: user.email,\n        password: user.password,\n        confirmPassword: user.confirmPassword\n      });\n    },\n    /*\n     * Forgot password\n     * @returns {undefined}\n     */\n    forgotPassword: function (user, cb) {\n      return $http.post(ppSettings.BASE_URL + 'api/users/forgotPassword', {\n        email: user.email\n      }).success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }.bind(this));\n    },\n    /**\n     * Delete access token and user info\n     *\n     * @param  {Function}\n     */\n    logout: function () {\n      $cookieStore.remove('token');\n      currentUser = {};\n    },\n    /**\n     * Create a new user\n     *\n     * @param  {Object}   user     - user info\n     * @param  {Function} callback - optional\n     * @return {Promise}\n     */\n     createUser: function (user, callback) {\n       var cb = callback || angular.noop;\n       return $http.post(appSettings.BASE_URL + 'api/v1/user/account-new', user)\n      .success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }).$promise;\n     },\n    /**\n     * Change password\n     *\n     * @param  {String}   oldPassword\n     * @param  {String}   newPassword\n     * @param  {Function} callback    - optional\n     * @return {Promise}\n     */\n    changePassword: function (oldPassword, newPassword, callback) {\n      var cb = callback || angular.noop;\n      \n      return $http.put(appSettings.BASE_URL + 'api/v1/users/change-password', {\n        oldPassword: oldPassword,\n        newPassword: newPassword\n      })\n      .success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }).$promise;\n    },\n    /**\n     * Gets all available info on authenticated user\n     *\n     * @return {Object} user\n     */\n    getCurrentUser: function () {\n      return currentUser;\n    },\n    /**\n     * Check if a user is logged in\n     *\n     * @return {Boolean}\n     */\n    isLoggedIn: function () {\n      return currentUser.hasOwnProperty('role');\n    },\n    /**\n     * Waits for currentUser to resolve before checking if user is logged in\n     */\n    isLoggedInAsync: function (cb) {\n      if (currentUser.hasOwnProperty('$promise')) {\n        currentUser.$promise.then(function () {\n          cb(true);\n        }).catch(function () {\n          cb(false);\n        });\n      } else if (currentUser.hasOwnProperty('role')) {\n        cb(true);\n      } else {\n        cb(false);\n      }\n    },\n    /**\n     * Check if a user is an admin\n     *\n     * @return {Boolean}\n     */\n\n    /**\n     * Get auth token\n     */\n    getToken: function () {\n      return $cookieStore.get('token');\n    },\n    recoverPassword: function (email, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.post(ppSettings.BASE_URL + 'auth/recoverPassword', {\n        email: email\n      })\n      .success(function (data) {\n        deferred.resolve(data);\n        return cb();\n      })\n      .error(function (err) {\n        deferred.reject(err);\n        return cb(err);\n      }.bind(this));\n\n      return deferred.promise;\n    },\n    confirmResetPasswordToken: function (token, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.get(ppSettings.BASE_URL + 'auth/confirmPasswordResetToken/' + token)\n        .success(function (data) {\n          //do login\n          $cookieStore.put('token', data.token);\n          currentUser = userService.get();\n\n          deferred.resolve(data);\n          return cb();\n        })\n        .error(function (err) {\n          deferred.reject(err);\n          return cb(err);\n        }.bind(this));\n\n      return deferred.promise;\n    }\n  };\n}]);","angular.module('matroshkiApp').factory('chatService', [ '$http', '$q', 'commonHelper', 'appSettings', function ($http, $q, commonHelper, appSettings) {\n  return{\n    get: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/chat-messages?' + query);\n    },\n    /**\n     * find all messages by mdoel id (room)\n     */\n    findByModel: function (params) {\n      //TODO - add options done\n      //\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/messages?' + query);\n    },\n    sendInstantTokens: function (modelId) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/member/send-instant-tokens/' + modelId,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    sendTipTokens: function (roomId, tokens) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/member/send-tip-tokens/' + roomId,\n        data: {\n          tokens: tokens\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    sendOfflineTokens: function (modelId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/member/send-offline-tokens/' + modelId);\n    }\n  };\n}]);","/* global io */\n'use strict';\n\nangular.module('matroshkiApp')\n  .factory('socket',['appSettings', 'socketFactory', 'commonHelper', '$window', function(appSettings, socketFactory, commonHelper, $window) {\n    // socket.io now auto-configures its connection when we ommit a connection url\n    var ioSocket = io(appSettings.SOCKET_URL, {\n      // Send auth token on connection, you will need to DI the Auth service above\n      'query': commonHelper.obToquery({token: appSettings.TOKEN}),\n      path: '/socket.io-client'\n    });\n\n    var socket = socketFactory({ ioSocket });\n\n   socket.on('another-model-connected', function() {\n        \n//       var cookies = document.cookie.split(\";\");\n//       console.log(cookies);\n//       for(var i=0; i < cookies.length; i++) {\n//         var equals = cookies[i].indexOf(\"=\");\n//         var name = equals > -1 ? cookies[i].substr(0, equals) : cookies[i];\n//         document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n//       }\n       //call logout to force remove http flag\n       alert('You are connecting in another session. exit now!');\n       $window.location.href = appSettings.BASE_URL + 'models/dashboard/profile';\n     });\n\n    return {\n      socket,\n\n      /**\n       * Register listeners to sync an array with updates on a model\n       *\n       * Takes the array we want to sync, the model name that socket updates are sent from,\n       * and an optional callback function after new items are updated.\n       *\n       * @param {String} modelName\n       * @param {Array} array\n       * @param {Function} cb\n       */\n      syncUpdates(modelName, array, cb) {\n        cb = cb || angular.noop;\n\n        /**\n         * Syncs item creation/updates on 'model:save'\n         */\n        socket.on(modelName + ':save', function (item) {\n          var oldItem = _.find(array, {_id: item._id});\n          var index = array.indexOf(oldItem);\n          var event = 'created';\n\n          // replace oldItem if it exists\n          // otherwise just add item to the collection\n          if (oldItem) {\n            array.splice(index, 1, item);\n            event = 'updated';\n          } else {\n            array.push(item);\n          }\n\n          cb(event, item, array);\n        });\n\n        /**\n         * Syncs removed items on 'model:remove'\n         */\n        socket.on(modelName + ':remove', function (item) {\n          var event = 'deleted';\n          _.remove(array, {_id: item._id});\n          cb(event, item, array);\n        });\n      },\n\n      /**\n       * Removes listeners for a models updates on the socket\n       *\n       * @param modelName\n       */\n      unsyncUpdates(modelName) {\n        socket.removeAllListeners(modelName + ':save');\n        socket.removeAllListeners(modelName + ':remove');\n      },\n\n      /**\n      * send new-chat-message event to server\n      */\n      sendChatMessage(data) {\n        socket.emit('new-chat-message', data);\n      },\n\n      /**\n      * event for the chat message callback\n      */\n      onReceiveChatMessage(cb) {\n        cb = cb || angular.noop;\n        socket.on('new-chat-message', cb);\n      },\n\n      /**\n      * send send-tip event to server\n      */\n      sendTip(data) {\n        socket.emit('send-tip', data);\n      },\n\n      /**\n       * Event for send tip callback\n       */\n      onReceiveTip(cb){\n        cb = cb || angular.noop;\n        socket.on('send-tip', cb);\n      },\n\n      /**\n       * new member join to room\n       */\n\n      joinRoom(data) {\n        socket.emit('join-room', data);\n      },\n      joinPrivateRoom(data) {\n        socket.emit('join-private-room', data);\n      },\n\n      onLeaveRoom(cb) {\n        cb = cb || angular.noop;\n\n        socket.on('leave-room', cb);\n      },\n      onMemberJoin(cb){\n        cb = cb || angular.noop;\n        //who\n        //total members...\n        //{ member: 2134, .... }\n        socket.on('join-room', cb);\n      },\n      //event get list models online\n      onModelOnline(cb){\n        cb = cb || angular.noop;\n        socket.on('model-online', cb);\n\n      },\n      //event check current model online\n      getCurrentModelOnline(roomId){\n        socket.emit('current-model-online', roomId);\n      },\n      //event get current model of room online\n      onCurrentModelOnline(cb){\n        cb = cb || angular.noop;\n        socket.on('current-model-online', cb);\n\n      },\n\n      getOnlineMembers(roomId) {\n        socket.emit('online-members', roomId);\n      },\n      onlineMembers(cb){\n        cb = cb || angular.noop;\n        //who\n        //total members...\n        //{ member: 2134, .... }\n        socket.on('online-members', cb);\n      },\n      reqGroupChat(modelId) {\n        socket.emit('get-all-group-chat', modelId);\n      },\n      reqPrivateChat(modelId) {\n        socket.emit('model-private-status', modelId);\n      },\n      onGroupChat(cb){\n        cb = cb || angular.noop;\n        //who\n        //total members...\n        //{ member: 2134, .... }\n        socket.on('on-group-chat', cb);\n      },\n\n      //model init public chat\n      onModelInitPublicChat(cb){\n          cb = cb || angular.noop();\n          //online status\n          socket.on('public-chat-init', cb);\n      },\n      getModelStreaming(roomId, modelId) {\n        socket.emit('model-streaming', {room: roomId, model: modelId});\n      },\n      /**\n       * notify with model when they receive new tokens\n       */\n      sendModelReceiveInfo(tokens){\n          socket.emit('model-receive-info', tokens)\n      },\n      /**\n       * model receive message\n       */\n      onModelReceiveInfo(cb){\n        cb = cb || angular.noop();\n        socket.on('model-receive-info', cb);\n\n      },\n      onModelStreaming(cb){\n        cb = cb || angular.noop;\n        //who\n        //total members...\n        //{ member: 2134, .... }\n        socket.on('model-streaming', cb);\n      },\n\n      on(event, cb) {\n        socket.on(event, cb);\n      },\n\n      emit(event, data, cb) {\n        socket.emit(event, data, cb);\n      }\n    };\n  }]);\n","/* global RTCIceCandidate, RTCSessionDescription, RTCPeerConnection, EventEmitter */\n'use strict';\n\n/**\n * @ngdoc service\n * @name publicApp.Room\n * @description\n * # Peer\n * Factory in the publicApp.\n */\nangular.module('matroshkiApp')\n.factory('peerService', [ '$rootScope', '$q', 'socket', 'appSettings', function ($rootScope, $q, socket, appSettings) {\n  var iceConfig = {'iceServers': appSettings.TURN_CONFIG},\n  peerConnections = {}, currentId, roomId, stream, peers = {};\n\n  function getPeerConnection(id) {\n    if (peerConnections[id]) {\n      return peerConnections[id];\n    }\n\n    var pc = new RTCPeerConnection(iceConfig);\n    peerConnections[id] = pc;\n    pc.addStream(stream);\n    pc.onicecandidate = function (evnt) {\n      socket.emit('video-msg', {by: currentId, to: id, ice: evnt.candidate, type: 'ice'});\n    };\n\n    pc.onaddstream = function (evnt) {\n      console.log('Received new stream');\n      api.trigger('peer.stream', [{\n          id: id,\n          stream: evnt.stream\n        }]);\n\n      if (!$rootScope.$$digest) {\n        $rootScope.$apply();\n      }\n    };\n    return pc;\n  }\n\n  function makeOffer(id) {\n    var pc = getPeerConnection(id);\n    pc.createOffer(function (sdp) {\n      pc.setLocalDescription(sdp);\n      console.log('Creating an offer for', id);\n      socket.emit('video-msg', {by: currentId, to: id, sdp: sdp, type: 'sdp-offer'});\n    }, function (e) {\n      console.log(e);\n    },\n    {mandatory: {OfferToReceiveVideo: true, OfferToReceiveAudio: true}});\n  }\n\n  function handleMessage(data) {\n    var pc = getPeerConnection(data.by);\n    switch (data.type) {\n      case 'sdp-offer':\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function () {\n          console.log('Setting remote description by offer');\n          pc.createAnswer(function (sdp) {\n            pc.setLocalDescription(sdp);\n            socket.emit('video-msg', {by: currentId, to: data.by, sdp: sdp, type: 'sdp-answer'});\n          }, function (e) {\n            console.log(e);\n          });\n        }, function (e) {\n          console.log(e);\n        });\n        break;\n      case 'sdp-answer':\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function () {\n          console.log('Setting remote description by answer');\n        }, function (e) {\n          console.error(e);\n        });\n        break;\n      case 'ice':\n        if (data.ice) {\n          console.log('Adding ice candidates');\n          pc.addIceCandidate(new RTCIceCandidate(data.ice));\n        }\n        break;\n    }\n  }\n\n  var socket = socket.socket,\n          connected = false;\n\n  function addHandlers(socket) {\n    socket.on('peer.connected', function (params) {\n      if (peers[params.id]) return;\n      console.log('peer.connected', params);\n      peers[params.id] = params.id;\n      makeOffer(params.id);\n    });\n\t\n    socket.on('peer.disconnected', function (data) {\n      api.trigger('peer.disconnected', [data]);\n      if (!$rootScope.$$digest) {\n        $rootScope.$apply();\n      }\n    });\n    socket.on('group.disconnected', function (data) {\n      api.trigger('group.disconnected', [data]);\n      if (!$rootScope.$$digest) {\n        $rootScope.$apply();\n      }\n    });\n    socket.on('video-msg', function (data) {\n      handleMessage(data);\n    });\n  }\n\n  var api = {\n    joinRoom: function (r, options) {\n      options = options || {};\n      if (!connected) {\n        socket.emit('video-chat-init', {room: r, data: options}, function (roomid, id) {\n          currentId = id;\n          roomId = roomid;\n        });\n        connected = true;\n      }\n    },\n    createRoom: function () {\n      var d = $q.defer();\n      socket.emit('video-chat-init', null, function (roomid, id) {\n        d.resolve(roomid);\n        roomId = roomid;\n        currentId = id;\n        connected = true;\n      });\n      return d.promise;\n    },\n    joinGroupRoom: function (r, options) {\n      options = options || {};\n      if (!connected) {\n        socket.emit('group-call-init', {room: r, data: options}, function (roomid, id) {\n          currentId = id;\n          roomId = roomid;\n        });\n        connected = true;\n      }\n    },\n    createGroupRoom: function () {\n      var d = $q.defer();\n      socket.emit('group-call-init', null, function (roomid, id) {\n        d.resolve(roomid);\n        roomId = roomid;\n        currentId = id;\n        connected = true;\n      });\n      return d.promise;\n    },\n    init: function (s) {\n      stream = s;\n    }\n  };\n  EventEmitter.call(api);\n  Object.setPrototypeOf(api, EventEmitter.prototype);\n\n  addHandlers(socket);\n  return api;\n}]);","'use strict';\nangular.module('matroshkiApp').factory('VideoStream', ['$q', function (a) {\n  var b;\n  return {\n      get: function () {\n        if (b)\n          return a.when(b);\n        var c = a.defer();\n        return navigator.getUserMedia({\n          video: !0,\n          audio: !0\n        }, function (a) {\n          b = a, c.resolve(b);\n        }, function (a) {\n          c.reject(a);\n        }),\n                c.promise;\n      }\n    };\n  }\n]);","'use strict';\n\nangular.module('matroshkiApp').factory('chatSettingService', [ '$q', '$http', 'appSettings', function ($q, $http, appSettings) {\n  return{\n    get: function (role, modelId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/performerchat/' + role + '/' + modelId);\n    },\n    update: function (modelId, data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/performerchat/update/' + modelId,\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    getChatPrice: function (model, type) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/performer-chat-price/' + type + '/' + model);\n    }\n  };\n}]);","angular.module('matroshkiApp').factory('onlineService', [ '$http', 'appSettings', 'commonHelper', function ($http, appSettings, commonHelper) {\n  return{\n    get: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/online?' + query);\n    },\n    getTopModels: function () {\n      return $http.get(appSettings.BASE_URL + 'api/v1/top-models');\n    },\n    getModelsByCategory: function (model, category) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/get-models-by-category?model=' + model + '&category=' + category);\n    },\n    checkOnline: function (roomId, chatType) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/check-online/' + chatType + '/' + roomId);\n    },\n    getModelRotateImages: function (thread){\n      return $http.get(appSettings.BASE_URL + 'api/v1/get-model-rotate-images/'+thread);\n    },\n    setFavorite: function (id) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/user/favorite',\n        data: {\n          model: id\n        }\n      }).then(function cb(res) {\n        return res;\n      }, function error(err) {\n        return err;\n      });\n    }\n  };\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('videoService', [ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\n  return{\n    checkExist: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/find-video-name?' + query);\n    },\n    create: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/video/store',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    setVideoStatus: function (id, status) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/video/status/' + id,\n        data: {\n          status: status\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    findVideoById: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/find-by-id/' + id);\n    },\n    getModelVideos: function (id, page) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/get-model-videos/' + id + '?page=' + page);\n    },\n    update: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/video/update',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n  }\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('galleryService',[ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\n  return{\n    findMyGalleries: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/find-my-galleries?' + query);\n    },\n    getModelGalleries: function (id, page) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/get-model-galleries/' + id + '?page=' + page);\n    },\n    checkExist: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/find-gallery-name?' + query);\n    },\n    create: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/store',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    update: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/update',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    setGalleryStatus: function (id, status) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/status',\n        data: {\n          id: id,\n          status: status\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteGallery: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/gallery/delete/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n  }\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('mediaService',[ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\n  return{\n    findProfileByMe: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-profile-image?' + query);\n    },\n    findMyMediaGallery: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-media-gallery?' + query);\n    },\n    findMyVideoGallery: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-video-gallery?' + query);\n    },\n    setMainImage: function (id) {\n      return $http.put(appSettings.BASE_URL + 'api/v1/media/model/set-main-image/' + id);\n    },\n    checkOwner: function (params) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/check-owner',\n        data: params\n\n      }).then(function cb(res) {\n        return res;\n      }, function error(err) {\n        return err;\n      });\n    },\n    setMediaStatus: function (id, status) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/model/set-media-status/' + id,\n        data: {\n          status: status\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteImage: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/media/image/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteVideo: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/media/video/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n  }\n}]);"]}