{"version":3,"sources":["user.service.js","auth.service.js","chat.service.js","socket.service.js","peer.service.js","video-stream.service.js","chat-settings.service.js","likes-widget.service.js","online.service.js","video.service.js","gallery.service.js","schedule.service.js","media.service.js","country.service.js","category.service.js","earning.service.js","payout.service.js","product.service.js","order.service.js"],"names":["angular","module","factory","$http","$q","appSettings","commonHelper","get","BASE_URL","findAll","params","query","obToquery","findMember","id","findById","getPerformer","findByRoom","roomId","countModelOnline","changeAccountStatus","status","method","url","data","then","cb","res","error","err","changeAccountRole","role","sendTokens","modelId","tokens","options","successCallback","response","errorCallback","sendPaidTokens","type","chatType","updateOtherSetting","setting","updateContact","contact","updatePayment","payment","suspendAccount","updatePerformer","performer","profile","updateStudioProfile","setProfile","imageId","checkPremium","room","addBlackList","removeBlackList","checkBanNick","getToken","userIds","checkBusy","userService","$cookieStore","currentUser","login","user","callback","noop","deferred","defer","post","username","password","success","put","token","resolve","logout","reject","bind","promise","resetPassword","ppSettings","email","confirmPassword","forgotPassword","remove","createUser","$promise","changePassword","oldPassword","newPassword","getCurrentUser","isLoggedIn","hasOwnProperty","isLoggedInAsync","catch","recoverPassword","confirmResetPasswordToken","findByModel","sendInstantTokens","sendTipTokens","sendOfflineTokens","socketFactory","$window","ioSocket","io","SOCKET_URL","TOKEN","path","socket","on","alert","location","href","syncUpdates","modelName","array","item","oldItem","_","find","_id","index","indexOf","event","splice","push","unsyncUpdates","removeAllListeners","sendChatMessage","emit","onReceiveChatMessage","sendTip","onReceiveTip","joinRoom","joinPrivateRoom","onLeaveRoom","onMemberJoin","onModelOnline","getCurrentModelOnline","onCurrentModelOnline","getOnlineMembers","onlineMembers","reqGroupChat","reqPrivateChat","onGroupChat","onModelInitPublicChat","getModelStreaming","model","sendModelReceiveInfo","onModelReceiveInfo","onModelStreaming","$rootScope","iceConfig","TURN_CONFIG","peerConnections","currentId","stream","peers","getPeerConnection","pc","RTCPeerConnection","addStream","onicecandidate","evnt","by","to","ice","candidate","ontrack","api","trigger","streams","$$digest","$apply","onaddstream","console","log","makeOffer","createOffer","sdp","setLocalDescription","e","mandatory","OfferToReceiveVideo","OfferToReceiveAudio","voiceActivityDetection","handleMessage","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","connected","addHandlers","r","roomid","createRoom","d","joinGroupRoom","createGroupRoom","init","s","EventEmitter","call","Object","setPrototypeOf","prototype","a","b","when","c","echoCancellation","autoGainControl","noiseSuppression","highpassFilter","typingNoiseDetection","window","chrome","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googTypingNoiseDetection","navigator","getWebcam","getUserMedia","webKitGetUserMedia","moxGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","audio","video","update","getChatPrice","count","checkMe","likeMe","getTopModels","getModelsByCategory","category","checkOnline","getModelRotateImages","thread","setFavorite","checkExist","create","setVideoStatus","findVideoById","getModelVideos","page","findMyGalleries","getModelGalleries","setGalleryStatus","deleteGallery","setSchedule","schedule","findProfileByMe","findMyMediaGallery","findMyVideoGallery","setMainImage","checkOwner","setMediaStatus","deleteImage","deleteVideo","getStates","countryId","getCities","stateId","getCountries","all","checkName","name","addNew","delete","findMe","modelCommission","filterByDay","date","filterByDefault","countPaidGallery","galleryId","countPaidItem","itemId","getComments","isStudio","resp","addComment","updateStatus","getEarningByRequestedDate","getLastestRequestPayout","getTotalPendingBalance","buy"],"mappings":"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","file":"service.js","sourcesContent":["angular.module('matroshkiApp').factory('userService', function ($http, $q, appSettings, commonHelper) {\r\n  return{\r\n    get: function () {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/findMe');\r\n    },\r\n    findAll: function (params) {\r\n      var query = commonHelper.obToquery(params);\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/find-all?' + query);\r\n    },\r\n    findMember: function (id) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/findMember/' + id);\r\n    },\r\n    findById: function (id) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/find-by-id/' + id);\r\n    },\r\n    getPerformer: function () {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/profile/performer');\r\n    },\r\n    findByRoom: function (roomId) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/members/find-by-room/' + roomId);\r\n    },\r\n    countModelOnline: function () {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/online/count');\r\n    },\r\n    changeAccountStatus: function (id, status) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/user/account-status/' + id,\r\n        data: {\r\n          status: status\r\n        }\r\n      }).then(function cb(res) {\r\n        return res;\r\n      }, function error(err) {\r\n        return err;\r\n      });\r\n    },\r\n    changeAccountRole: function (id, role) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/user/account-role/' + id,\r\n        data: {\r\n          role: role\r\n        }\r\n      }).then(function cb(res) {\r\n        return res;\r\n      }, function error(err) {\r\n        return err;\r\n      });\r\n    },\r\n    sendTokens: function (modelId, tokens, options) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/member/send-tokens',\r\n        data: {\r\n          modelId: modelId,\r\n          tokens: tokens,\r\n          options: options\r\n        }\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    sendPaidTokens: function (modelId, type) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/member/send-paid-tokens',\r\n        data: {\r\n          modelId: modelId,\r\n          chatType: type\r\n        }\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    updateOtherSetting: function (setting) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/users/model/other-settings',\r\n        data: setting\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    updateContact: function (contact) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/users/model/update-contact',\r\n        data: contact\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    updatePayment: function (payment) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/users/model/update-payment',\r\n        data: payment\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    suspendAccount: function (data) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/users/model/suspend',\r\n        data: data\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    updatePerformer: function (performer, profile) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/users/model/performer',\r\n        data: {\r\n          performer: performer,\r\n          profile: profile\r\n        }\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    updateStudioProfile: function (profile) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/studio/profile',\r\n        data: profile\r\n      }).then(function successCallback(res) {\r\n        return res;\r\n      }, function errorCallback(err) {\r\n        return err;\r\n      });\r\n    },\r\n    setProfile: function (imageId) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/me/profile/image/' + imageId);\r\n    },\r\n    checkPremium: function (room) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/me/check-premium/' + room);\r\n    },\r\n    addBlackList: function (id) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/add-black-list/' + id);\r\n    },\r\n    removeBlackList: function (id) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/remove-black-list/' + id);\r\n    },\r\n    checkBanNick: function (modelId) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/user/check-black-list/' + modelId);\r\n    },\r\n    getToken: function(userIds){\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/member/get-token?ids=' + userIds);\r\n    },\r\n    checkBusy: function(modelId) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/models/'+modelId+'/check-busy');\r\n    }\r\n  };\r\n});","angular.module('matroshkiApp')\n.factory('authService', [ '$http', 'userService', '$cookieStore', '$q', 'appSettings', function ($http, userService, $cookieStore, $q, appSettings) {\n  var currentUser = userService.get();\n  return {\n    /**\n     * Authenticate user and save token\n     *\n     * @param  {Object}   user     - login info\n     * @param  {Function} callback - optional\n     * @return {Promise}\n     */\n    login: function (user, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.post(appSettings.BASE_URL + 'api/v1/auth/login', {\n        username: user.username,\n        password: user.password\n      })\n      .success(function (data) {\n        $cookieStore.put('token', data.token);\n        currentUser = userService.get();\n        deferred.resolve(data);\n        return cb();\n      })\n      .error(function (err) {\n        this.logout();\n        deferred.reject(err);\n        return cb(err);\n      }.bind(this));\n\n      return deferred.promise;\n    },\n    /*\n     * Update password after confirm email\n     * @returns {function}\n     */\n    resetPassword: function (user) {\n      return $http.post(ppSettings.BASE_URL + 'api/v1/users/resetPassword', {\n        email: user.email,\n        password: user.password,\n        confirmPassword: user.confirmPassword\n      });\n    },\n    /*\n     * Forgot password\n     * @returns {undefined}\n     */\n    forgotPassword: function (user, cb) {\n      return $http.post(ppSettings.BASE_URL + 'api/users/forgotPassword', {\n        email: user.email\n      }).success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }.bind(this));\n    },\n    /**\n     * Delete access token and user info\n     *\n     * @param  {Function}\n     */\n    logout: function () {\n      $cookieStore.remove('token');\n      currentUser = {};\n    },\n    /**\n     * Create a new user\n     *\n     * @param  {Object}   user     - user info\n     * @param  {Function} callback - optional\n     * @return {Promise}\n     */\n     createUser: function (user, callback) {\n       var cb = callback || angular.noop;\n       return $http.post(appSettings.BASE_URL + 'api/v1/user/account-new', user)\n      .success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }).$promise;\n     },\n    /**\n     * Change password\n     *\n     * @param  {String}   oldPassword\n     * @param  {String}   newPassword\n     * @param  {Function} callback    - optional\n     * @return {Promise}\n     */\n    changePassword: function (oldPassword, newPassword, callback) {\n      var cb = callback || angular.noop;\n      \n      return $http.put(appSettings.BASE_URL + 'api/v1/users/change-password', {\n        oldPassword: oldPassword,\n        newPassword: newPassword\n      })\n      .success(function (data) {\n        return cb(data);\n      })\n      .error(function (err) {\n        return cb(err);\n      }).$promise;\n    },\n    /**\n     * Gets all available info on authenticated user\n     *\n     * @return {Object} user\n     */\n    getCurrentUser: function () {\n      return currentUser;\n    },\n    /**\n     * Check if a user is logged in\n     *\n     * @return {Boolean}\n     */\n    isLoggedIn: function () {\n      return currentUser.hasOwnProperty('role');\n    },\n    /**\n     * Waits for currentUser to resolve before checking if user is logged in\n     */\n    isLoggedInAsync: function (cb) {\n      if (currentUser.hasOwnProperty('$promise')) {\n        currentUser.$promise.then(function () {\n          cb(true);\n        }).catch(function () {\n          cb(false);\n        });\n      } else if (currentUser.hasOwnProperty('role')) {\n        cb(true);\n      } else {\n        cb(false);\n      }\n    },\n    /**\n     * Check if a user is an admin\n     *\n     * @return {Boolean}\n     */\n\n    /**\n     * Get auth token\n     */\n    getToken: function () {\n      return $cookieStore.get('token');\n    },\n    recoverPassword: function (email, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.post(ppSettings.BASE_URL + 'auth/recoverPassword', {\n        email: email\n      })\n      .success(function (data) {\n        deferred.resolve(data);\n        return cb();\n      })\n      .error(function (err) {\n        deferred.reject(err);\n        return cb(err);\n      }.bind(this));\n\n      return deferred.promise;\n    },\n    confirmResetPasswordToken: function (token, callback) {\n      var cb = callback || angular.noop;\n      var deferred = $q.defer();\n\n      $http.get(ppSettings.BASE_URL + 'auth/confirmPasswordResetToken/' + token)\n        .success(function (data) {\n          //do login\n          $cookieStore.put('token', data.token);\n          currentUser = userService.get();\n\n          deferred.resolve(data);\n          return cb();\n        })\n        .error(function (err) {\n          deferred.reject(err);\n          return cb(err);\n        }.bind(this));\n\n      return deferred.promise;\n    }\n  };\n}]);","angular.module('matroshkiApp').factory('chatService', [ '$http', '$q', 'commonHelper', 'appSettings', function ($http, $q, commonHelper, appSettings) {\r\n  return{\r\n    get: function (params) {\r\n      var query = commonHelper.obToquery(params);\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/chat-messages?' + query);\r\n    },\r\n    /**\r\n     * find all messages by mdoel id (room)\r\n     */\r\n    findByModel: function (params) {\r\n      //TODO - add options done\r\n      //\r\n      var query = commonHelper.obToquery(params);\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/messages?' + query);\r\n    },\r\n    sendInstantTokens: function (modelId) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/member/send-instant-tokens/' + modelId,\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    sendTipTokens: function (roomId, tokens) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/member/send-tip-tokens/' + roomId,\r\n        data: {\r\n          tokens: tokens\r\n        }\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    sendOfflineTokens: function (modelId) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/member/send-offline-tokens/' + modelId);\r\n    }\r\n  };\r\n}]);","/* global io */\r\n'use strict';\r\n\r\nangular.module('matroshkiApp')\r\n  .factory('socket',['appSettings', 'socketFactory', 'commonHelper', '$window', function(appSettings, socketFactory, commonHelper, $window) {\r\n    // socket.io now auto-configures its connection when we ommit a connection url\r\n    var ioSocket = io(appSettings.SOCKET_URL, {\r\n      // Send auth token on connection, you will need to DI the Auth service above\r\n      'query': commonHelper.obToquery({token: appSettings.TOKEN}),\r\n      path: '/socket.io-client'\r\n    });\r\n\r\n    var socket = socketFactory({ ioSocket });\r\n\r\n   socket.on('another-model-connected', function() {\r\n\r\n//       var cookies = document.cookie.split(\";\");\r\n//       console.log(cookies);\r\n//       for(var i=0; i < cookies.length; i++) {\r\n//         var equals = cookies[i].indexOf(\"=\");\r\n//         var name = equals > -1 ? cookies[i].substr(0, equals) : cookies[i];\r\n//         document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n//       }\r\n       //call logout to force remove http flag\r\n       alert('You are connecting in another session. exit now!');\r\n       $window.location.href = appSettings.BASE_URL + 'models/dashboard/profile';\r\n     });\r\n\r\n    return {\r\n      socket,\r\n\r\n      /**\r\n       * Register listeners to sync an array with updates on a model\r\n       *\r\n       * Takes the array we want to sync, the model name that socket updates are sent from,\r\n       * and an optional callback function after new items are updated.\r\n       *\r\n       * @param {String} modelName\r\n       * @param {Array} array\r\n       * @param {Function} cb\r\n       */\r\n      syncUpdates(modelName, array, cb) {\r\n        cb = cb || angular.noop;\r\n\r\n        /**\r\n         * Syncs item creation/updates on 'model:save'\r\n         */\r\n        socket.on(modelName + ':save', function (item) {\r\n          var oldItem = _.find(array, {_id: item._id});\r\n          var index = array.indexOf(oldItem);\r\n          var event = 'created';\r\n\r\n          // replace oldItem if it exists\r\n          // otherwise just add item to the collection\r\n          if (oldItem) {\r\n            array.splice(index, 1, item);\r\n            event = 'updated';\r\n          } else {\r\n            array.push(item);\r\n          }\r\n\r\n          cb(event, item, array);\r\n        });\r\n\r\n        /**\r\n         * Syncs removed items on 'model:remove'\r\n         */\r\n        socket.on(modelName + ':remove', function (item) {\r\n          var event = 'deleted';\r\n          _.remove(array, {_id: item._id});\r\n          cb(event, item, array);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Removes listeners for a models updates on the socket\r\n       *\r\n       * @param modelName\r\n       */\r\n      unsyncUpdates(modelName) {\r\n        socket.removeAllListeners(modelName + ':save');\r\n        socket.removeAllListeners(modelName + ':remove');\r\n      },\r\n\r\n      /**\r\n      * send new-chat-message event to server\r\n      */\r\n      sendChatMessage(data) {\r\n        socket.emit('new-chat-message', data);\r\n      },\r\n\r\n      /**\r\n      * event for the chat message callback\r\n      */\r\n      onReceiveChatMessage(cb) {\r\n        cb = cb || angular.noop;\r\n        socket.on('new-chat-message', cb);\r\n      },\r\n\r\n      /**\r\n      * send send-tip event to server\r\n      */\r\n      sendTip(data) {\r\n        socket.emit('send-tip', data);\r\n      },\r\n\r\n      /**\r\n       * Event for send tip callback\r\n       */\r\n      onReceiveTip(cb){\r\n        cb = cb || angular.noop;\r\n        socket.on('send-tip', cb);\r\n      },\r\n\r\n      /**\r\n       * new member join to room\r\n       */\r\n\r\n      joinRoom(data) {\r\n        socket.emit('join-room', data);\r\n      },\r\n      joinPrivateRoom(data) {\r\n        socket.emit('join-private-room', data);\r\n      },\r\n\r\n      onLeaveRoom(cb) {\r\n        cb = cb || angular.noop;\r\n\r\n        socket.on('leave-room', cb);\r\n      },\r\n      onMemberJoin(cb){\r\n        cb = cb || angular.noop;\r\n        //who\r\n        //total members...\r\n        //{ member: 2134, .... }\r\n        socket.on('join-room', cb);\r\n      },\r\n      //event get list models online\r\n      onModelOnline(cb){\r\n        cb = cb || angular.noop;\r\n        socket.on('model-online', cb);\r\n\r\n      },\r\n      //event check current model online\r\n      getCurrentModelOnline(roomId){\r\n        socket.emit('current-model-online', roomId);\r\n      },\r\n      //event get current model of room online\r\n      onCurrentModelOnline(cb){\r\n        cb = cb || angular.noop;\r\n        socket.on('current-model-online', cb);\r\n\r\n      },\r\n\r\n      getOnlineMembers(roomId) {\r\n        socket.emit('online-members', roomId);\r\n      },\r\n      onlineMembers(cb){\r\n        cb = cb || angular.noop;\r\n        //who\r\n        //total members...\r\n        //{ member: 2134, .... }\r\n        socket.on('online-members', cb);\r\n      },\r\n      reqGroupChat(modelId) {\r\n        socket.emit('get-all-group-chat', modelId);\r\n      },\r\n      reqPrivateChat(modelId) {\r\n        socket.emit('model-private-status', modelId);\r\n      },\r\n      onGroupChat(cb){\r\n        cb = cb || angular.noop;\r\n        //who\r\n        //total members...\r\n        //{ member: 2134, .... }\r\n        socket.on('on-group-chat', cb);\r\n      },\r\n\r\n      //model init public chat\r\n      onModelInitPublicChat(cb){\r\n          cb = cb || angular.noop();\r\n          //online status\r\n          socket.on('public-chat-init', cb);\r\n      },\r\n      getModelStreaming(roomId, modelId) {\r\n        socket.emit('model-streaming', {room: roomId, model: modelId});\r\n      },\r\n      /**\r\n       * notify with model when they receive new tokens\r\n       */\r\n      sendModelReceiveInfo(tokens){\r\n          socket.emit('model-receive-info', tokens)\r\n      },\r\n      /**\r\n       * model receive message\r\n       */\r\n      onModelReceiveInfo(cb){\r\n        cb = cb || angular.noop();\r\n        socket.on('model-receive-info', cb);\r\n\r\n      },\r\n      onModelStreaming(cb){\r\n        cb = cb || angular.noop;\r\n        //who\r\n        //total members...\r\n        //{ member: 2134, .... }\r\n        socket.on('model-streaming', cb);\r\n      },\r\n\r\n      on(event, cb) {\r\n        socket.on(event, cb);\r\n      },\r\n\r\n      emit(event, data, cb) {\r\n        socket.emit(event, data, cb);\r\n      }\r\n    };\r\n  }]);\r\n","/* global RTCIceCandidate, RTCSessionDescription, RTCPeerConnection, EventEmitter */\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name publicApp.Room\r\n * @description\r\n * # Peer\r\n * Factory in the publicApp.\r\n */\r\nangular.module('matroshkiApp').factory('peerService', ['$rootScope', '$q', 'socket', 'appSettings', function ($rootScope, $q, socket, appSettings) {\r\n  var iceConfig = { 'iceServers': appSettings.TURN_CONFIG },\r\n      peerConnections = {},\r\n      currentId,\r\n      roomId,\r\n      stream,\r\n      peers = {};\r\n\r\n  function getPeerConnection(id) {\r\n    if (peerConnections[id]) {\r\n      return peerConnections[id];\r\n    }\r\n\r\n    var pc = new RTCPeerConnection(iceConfig);\r\n    peerConnections[id] = pc;\r\n    pc.addStream(stream);\r\n    pc.onicecandidate = function (evnt) {\r\n      socket.emit('video-msg', { by: currentId, to: id, ice: evnt.candidate, type: 'ice' });\r\n    };\r\n    if ('ontrack' in pc) {\r\n      pc.ontrack = function (evnt) {\r\n        api.trigger('peer.stream', [{\r\n          id: id,\r\n          stream: evnt.streams[0]\r\n        }]);\r\n\r\n        if (!$rootScope.$$digest) {\r\n          $rootScope.$apply();\r\n        }\r\n      };\r\n    } else {\r\n    pc.onaddstream = function (evnt) {\r\n      console.log('Received new stream');\r\n      api.trigger('peer.stream', [{\r\n        id: id,\r\n        stream: evnt.stream\r\n      }]);\r\n\r\n      if (!$rootScope.$$digest) {\r\n        $rootScope.$apply();\r\n      }\r\n    };\r\n    }\r\n    return pc;\r\n  }\r\n\r\n  function makeOffer(id) {\r\n    var pc = getPeerConnection(id);\r\n    pc.createOffer(function (sdp) {\r\n      pc.setLocalDescription(sdp);\r\n      console.log('Creating an offer for', id);\r\n      socket.emit('video-msg', { by: currentId, to: id, sdp: sdp, type: 'sdp-offer' });\r\n    }, function (e) {\r\n      console.log(e);\r\n    }, { mandatory: { OfferToReceiveVideo: true, OfferToReceiveAudio: true,voiceActivityDetection: false } });\r\n  }\r\n\r\n  function handleMessage(data) {\r\n    var pc = getPeerConnection(data.by);\r\n    switch (data.type) {\r\n      case 'sdp-offer':\r\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function () {\r\n          console.log('Setting remote description by offer');\r\n          pc.createAnswer(function (sdp) {\r\n            pc.setLocalDescription(sdp);\r\n            socket.emit('video-msg', { by: currentId, to: data.by, sdp: sdp, type: 'sdp-answer' });\r\n          }, function (e) {\r\n            console.log(e);\r\n          });\r\n        }, function (e) {\r\n          console.log(e);\r\n        });\r\n        break;\r\n      case 'sdp-answer':\r\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function () {\r\n          console.log('Setting remote description by answer');\r\n        }, function (e) {\r\n          console.error(e);\r\n        });\r\n        break;\r\n      case 'ice':\r\n        if (data.ice) {\r\n          console.log('Adding ice candidates');\r\n          pc.addIceCandidate(new RTCIceCandidate(data.ice));\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  var socket = socket.socket,\r\n      connected = false;\r\n\r\n  function addHandlers(socket) {\r\n    socket.on('peer.connected', function (params) {\r\n      // if (peers[params.id]) return;\r\n      // console.log('peer.connected', params);\r\n      // peers[params.id] = params.id;\r\n      // makeOffer(params.id);\r\n    });\r\n\r\n    socket.on('peer.disconnected', function (data) {\r\n      api.trigger('peer.disconnected', [data]);\r\n      if (!$rootScope.$$digest) {\r\n        $rootScope.$apply();\r\n      }\r\n    });\r\n    socket.on('group.disconnected', function (data) {\r\n      api.trigger('group.disconnected', [data]);\r\n      if (!$rootScope.$$digest) {\r\n        $rootScope.$apply();\r\n      }\r\n    });\r\n    socket.on('video-msg', function (data) {\r\n      handleMessage(data);\r\n    });\r\n  }\r\n\r\n  var api = {\r\n    joinRoom: function joinRoom(r, options) {\r\n      options = options || {};\r\n      if (!connected) {\r\n        socket.emit('video-chat-init', { room: r, data: options }, function (roomid, id) {\r\n          currentId = id;\r\n          roomId = roomid;\r\n        });\r\n        connected = true;\r\n      }\r\n    },\r\n    createRoom: function createRoom() {\r\n      var d = $q.defer();\r\n      socket.emit('video-chat-init', null, function (roomid, id) {\r\n        d.resolve(roomid);\r\n        roomId = roomid;\r\n        currentId = id;\r\n        connected = true;\r\n      });\r\n      return d.promise;\r\n    },\r\n    joinGroupRoom: function joinGroupRoom(r, options) {\r\n      options = options || {};\r\n      if (!connected) {\r\n        socket.emit('group-call-init', { room: r, data: options }, function (roomid, id) {\r\n          currentId = id;\r\n          roomId = roomid;\r\n        });\r\n        connected = true;\r\n      }\r\n    },\r\n    createGroupRoom: function createGroupRoom() {\r\n      var d = $q.defer();\r\n      socket.emit('group-call-init', null, function (roomid, id) {\r\n        d.resolve(roomid);\r\n        roomId = roomid;\r\n        currentId = id;\r\n        connected = true;\r\n      });\r\n      return d.promise;\r\n    },\r\n    init: function init(s) {\r\n      stream = s;\r\n    }\r\n  };\r\n  EventEmitter.call(api);\r\n  Object.setPrototypeOf(api, EventEmitter.prototype);\r\n\r\n  addHandlers(socket);\r\n  return api;\r\n}]);","angular.module('matroshkiApp').factory('VideoStream', ['$q', function (a) {\r\n  var b;\r\n  return {\r\n    get: function get() {\r\n      if (b) return a.when(b);\r\n      var c = a.defer();\r\n       var mandatory = {\r\n          mandatory: {\r\n              echoCancellation: true,\r\n              autoGainControl: true,\r\n              noiseSuppression: true,\r\n\r\n              highpassFilter: true,\r\n              typingNoiseDetection: true\r\n            }\r\n       };\r\n      if(window.chrome){\r\n       mandatory = {\r\n          mandatory: {\r\n              echoCancellation: true,\r\n              googAutoGainControl: true,\r\n              googNoiseSuppression: true,\r\n              googHighpassFilter: true,\r\n              googTypingNoiseDetection: true,\r\n            }\r\n        };\r\n      }\r\n       navigator.getWebcam = navigator.getUserMedia || navigator.webKitGetUserMedia || navigator.moxGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\r\n      if (navigator.mediaDevices.getUserMedia) {\r\n        return navigator.mediaDevices.getUserMedia({ audio: mandatory, video: true }).then(function (a) {\r\n          b = a, c.resolve(b);\r\n        }).catch(function (a) {\r\n          c.reject(a);\r\n        }), c.promise;\r\n      }\r\n     \r\n      return navigator.getWebcam({\r\n        video: !0,\r\n        audio: mandatory\r\n      }, function (a) {\r\n        b = a, c.resolve(b);\r\n      }, function (a) {\r\n        c.reject(a);\r\n      }), c.promise;\r\n    }\r\n  };\r\n}]);","'use strict';\n\nangular.module('matroshkiApp').factory('chatSettingService', [ '$q', '$http', 'appSettings', function ($q, $http, appSettings) {\n  return{\n    get: function (role, modelId) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/performerchat/' + role + '/' + modelId);\n    },\n    update: function (modelId, data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/performerchat/update/' + modelId,\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    getChatPrice: function (model, type) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/performer-chat-price/' + type + '/' + model);\n    }\n  };\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('likesWidgetService', function ($http, $q, commonHelper, appSettings) {\n  return{\n    count: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/likes/count?' + query);\n    },\n    checkMe: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/likes/checkMe?' + query);\n    },\n    likeMe: function (params) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/likes/likeMe',\n        data: params\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    }\n  };\n});","angular.module('matroshkiApp').factory('onlineService', [ '$http', 'appSettings', 'commonHelper', function ($http, appSettings, commonHelper) {\r\n  return{\r\n    get: function (params) {\r\n      var query = commonHelper.obToquery(params);\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/online?' + query);\r\n    },\r\n    getTopModels: function () {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/top-models');\r\n    },\r\n    getModelsByCategory: function (model, category) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/get-models-by-category?model=' + model + '&category=' + category);\r\n    },\r\n    checkOnline: function (roomId, chatType) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/check-online/' + chatType + '/' + roomId);\r\n    },\r\n    getModelRotateImages: function (thread){\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/get-model-rotate-images/'+thread);\r\n    },\r\n    setFavorite: function (id) {\r\n      return $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/user/favorite',\r\n        data: {\r\n          model: id\r\n        }\r\n      }).then(function cb(res) {\r\n        return res;\r\n      }, function error(err) {\r\n        return err;\r\n      });\r\n    }\r\n  };\r\n}]);","/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n\r\nangular.module('matroshkiApp').factory('videoService', [ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\r\n  return{\r\n    checkExist: function (params) {\r\n      var query = commonHelper.obToquery(params);\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/find-video-name?' + query);\r\n    },\r\n    create: function (data) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/media/video/store',\r\n        data: data\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    setVideoStatus: function (id, status) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/media/video/status/' + id,\r\n        data: {\r\n          status: status\r\n        }\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    findVideoById: function (id) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/find-by-id/' + id);\r\n    },\r\n    getModelVideos: function (id, page) {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/video/get-model-videos/' + id + '?page=' + page);\r\n    },\r\n    update: function (data) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/media/video/update',\r\n        data: data\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n  }\r\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('galleryService',[ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\n  return{\n    findMyGalleries: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/find-my-galleries?' + query);\n    },\n    getModelGalleries: function (id, page) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/get-model-galleries/' + id + '?page=' + page);\n    },\n    checkExist: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/gallery/find-gallery-name?' + query);\n    },\n    create: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/store',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    update: function (data) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/update',\n        data: data\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    setGalleryStatus: function (id, status) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/gallery/status',\n        data: {\n          id: id,\n          status: status\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteGallery: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/gallery/delete/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n  }\n}]);","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp')\n        .factory('scheduleService', function ($http, appSettings) {\n          return{\n            setSchedule: function (schedule) {\n              return $http({\n                method: 'post',\n                url: appSettings.BASE_URL + 'api/v1/schedule/model/update',\n                data: schedule\n              }).then(function successCallback(res) {\n                return res;\n              }, function errorCallback(err) {\n                return err;\n              });\n            },\n          };\n        });","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('mediaService',[ '$http', 'commonHelper', 'appSettings', function ($http, commonHelper, appSettings) {\n  return{\n    findProfileByMe: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-profile-image?' + query);\n    },\n    findMyMediaGallery: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-media-gallery?' + query);\n    },\n    findMyVideoGallery: function (params) {\n      var query = commonHelper.obToquery(params);\n      return $http.get(appSettings.BASE_URL + 'api/v1/media/model/find-my-video-gallery?' + query);\n    },\n    setMainImage: function (id) {\n      return $http.put(appSettings.BASE_URL + 'api/v1/media/model/set-main-image/' + id);\n    },\n    checkOwner: function (params) {\n      return $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/check-owner',\n        data: params\n\n      }).then(function cb(res) {\n        return res;\n      }, function error(err) {\n        return err;\n      });\n    },\n    setMediaStatus: function (id, status) {\n      return  $http({\n        method: 'post',\n        url: appSettings.BASE_URL + 'api/v1/media/model/set-media-status/' + id,\n        data: {\n          status: status\n        }\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteImage: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/media/image/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n    deleteVideo: function (id) {\n      return  $http({\n        method: 'delete',\n        url: appSettings.BASE_URL + 'api/v1/media/video/' + id,\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        return response;\n      }, function errorCallback(err) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        return err;\n      });\n    },\n  }\n}]);","angular.module('matroshkiApp')\n        .factory('countryService', function ($http, $q, appSettings) {\n          return{\n            getStates: function (countryId) {\n              return $http.get(appSettings.BASE_URL + 'api/v1/country/states/'+countryId);\n            },\n            getCities: function (stateId) {\n              return $http.get(appSettings.BASE_URL + 'api/v1/country/cities/'+stateId);\n            },\n            getCountries: function () {\n              return $http.get(appSettings.BASE_URL + 'api/v1/country/countries');\n            }\n          };\n        });","/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n\r\nangular.module('matroshkiApp').factory('categoryService', function ($http, $q, commonHelper, appSettings) {\r\n  return{\r\n    all: function () {\r\n      return $http.get(appSettings.BASE_URL + 'api/v1/category/findAll');\r\n    },\r\n    checkName: function (name) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/category/check-name',\r\n        data: {name: name}\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    addNew: function (name) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/category/add-new',\r\n        data: {name: name}\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    update: function (category) {\r\n      return  $http({\r\n        method: 'post',\r\n        url: appSettings.BASE_URL + 'api/v1/category/update/' + category.id,\r\n        data: category\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    },\r\n    delete: function (id) {\r\n      return  $http({\r\n        method: 'delete',\r\n        url: appSettings.BASE_URL + 'api/v1/category/delete/' + id,\r\n      }).then(function successCallback(response) {\r\n        // this callback will be called asynchronously\r\n        // when the response is available\r\n        return response;\r\n      }, function errorCallback(err) {\r\n        // called asynchronously if an error occurs\r\n        // or server returns response with an error status.\r\n        return err;\r\n      });\r\n    }\r\n  }\r\n});","/* \n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nangular.module('matroshkiApp').factory('earningService', function ($http, $q, commonHelper, appSettings) {\n  return{\n    findMe: function (params, page) {\n\n      var query = commonHelper.obToquery(params);\n//      var page = (page) ? page : 0;\n\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/find-earning?' + query);\n    },\n    modelCommission: function () {\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/commission');\n    },\n    filterByDay: function (date) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/detail?filter=' + date + '&by=day');\n    },\n    filterByDefault: function (id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/detail?filter=' + id + '&by=none');\n    },\n    countPaidGallery: function (galleryId, item) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/count-paid-gallery?item-id=' + galleryId + '&item=' + item);\n    },\n    countPaidItem: function (itemId, item) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/earning/count-paid-item?item-id=' + itemId + '&item=' + item);\n    }\n\n  };\n});","'use strict';\n\nangular.module('matroshkiApp').factory('payoutService', [\n  '$http', 'appSettings', 'commonHelper', function ($http, appSettings, commonHelper) {\n    return{\n      getComments: function(id, isStudio) {\n        var url = appSettings.BASE_URL + 'api/v1/payouts/' + (isStudio ? 'studio/' : '') + id + '/comments';\n        return $http.get(url)\n                .then(function (resp) {\n                  return resp.data;\n                });\n      },\n\n      addComment: function(id, data, isStudio) {\n        var url = appSettings.BASE_URL + 'api/v1/payouts/' + (isStudio ? 'studio/' : '') + id + '/comments';\n        return $http.post(url, data)\n              .then(function (resp) {\n                return resp.data;\n              });\n      },\n\n      updateStatus: function(id, data, isStudio) {\n        var url = appSettings.BASE_URL + 'api/v1/payouts/' + (isStudio ? 'studio/' : '') + id + '/status';\n        return $http.post(url, data)\n              .then(function (resp) {\n                return resp.data;\n              });\n      },\n      getEarningByRequestedDate: function(options){\n        var query = commonHelper.obToquery(options);\n        return $http.get(appSettings.BASE_URL + 'api/v1/payouts/get-earning-by-requested-day?' + query);\n      },\n      getLastestRequestPayout: function(type){\n        return $http.get(appSettings.BASE_URL + 'api/v1/payouts/get-lastest-request-payout?type=' + type);\n      },\n      getTotalPendingBalance: function(){\n        return $http.get(appSettings.BASE_URL + 'api/v1/payouts/get-total-pending-balance');\n      }\n    };\n  }\n]);","'use strict';\n\nangular.module('matroshkiApp').factory('productService', [\n  '$http', 'appSettings', function ($http, appSettings) {\n    return{\n      buy: function (id, data) {\n        return $http.post(appSettings.BASE_URL + 'api/v1/products/' + id + '/buy', data)\n                .then(function(resp) { return resp.data; });\n      }\n    };\n  }\n]);","'use strict';\n\nangular.module('matroshkiApp').factory('orderService', function ($http, appSettings) {\n  return {\n    update: function (id, data) {\n      return $http.put(appSettings.BASE_URL + 'api/v1/orders/' + id, data)\n              .then(function (resp) {\n                return resp.data;\n              });\n    },\n\n    getComments: function(id) {\n      return $http.get(appSettings.BASE_URL + 'api/v1/orders/' + id + '/comments')\n              .then(function (resp) {\n                return resp.data;\n              });\n    },\n\n    addComment: function(id, data) {\n      return $http.post(appSettings.BASE_URL + 'api/v1/orders/' + id + '/comments', data)\n              .then(function (resp) {\n                return resp.data;\n              });\n    }\n  };\n});"]}